;; IDLWAVE libinfo file
;; Created Thu Aug 24 15:31:52 2000


(setq idlwave-sys-dir "/usr/local/rsi/idl_5.2/")

(setq idlwave-path-alist
    '(
      ("/home/ao/idl_lib/routines/" . t)
      ("/home/ao/idl_lib/flux3d/" . t)
      ("/home/ao/idl_lib/t3d/" . t)
      ("/home/ao/idl_lib/plo1/" . t)
      ("/home/ao/idl_lib/plo2/collect/" . t)
      ("/home/ao/idl_lib/plo2/" . t)
      ("/home/ao/idl_lib/plo3/div/" . t)
      ("/home/ao/idl_lib/plo3/old/" . t)
      ("/home/ao/idl_lib/plo3/" . t)
      ("/home/ao/idl_lib/mdiag/" . t)
      ("/home/ao/idl_lib/zhu/" . t)
      ("/home/ao/idl_lib/lumm/" . t)
      ("/home/ao/idl_lib/var/donf/" . t)
      ("/home/ao/idl_lib/var/stuff/" . t)
      ("/home/ao/idl_lib/var/" . t)
      ("/usr/local/rsi/idl/lib/hook/" . t)
      ("/usr/local/rsi/idl/lib/compat/" . t)
      ("/usr/local/rsi/idl/lib/obsolete/" . t)
      ("/usr/local/rsi/idl/lib/" . t)))

(setq idlwave-library-routines
    '(
    ("VECT3" pro nil (lib . "{1}/vect3.pro") "%s, U, V, X, Y" (("color") ("Dots") ("Length") ("Missing") ("noerase") ("position") ("Sizerat") ("Title")))
    ("FUNC" fun nil (lib . "{1}/troot.pro") "Result = %s(x)" nil)
    ("slown" pro nil (lib . "{1}/slown.pro") "%s" (("CMD_FILE") ("COMMANDS") ("DETACHED") ("GROUP") ("RANGE") ("RESOLUTION")))
    ("slown_event" pro nil (lib . "{1}/slown.pro") "%s, ev" nil)
    ("mark_cube" pro nil (lib . "{1}/slown.pro") "%s, ev" nil)
    ("mark_cube1" pro nil (lib . "{1}/slown.pro") "%s, p0, ip" nil)
    ("do_cube" pro nil (lib . "{1}/slown.pro") "%s" nil)
    ("mark_slice" pro nil (lib . "{1}/slown.pro") "%s, ev" nil)
    ("mark_oblique" pro nil (lib . "{1}/slown.pro") "%s, color" nil)
    ("draw_orientation" pro nil (lib . "{1}/slown.pro") "%s" nil)
    ("slown_postscript" pro nil (lib . "{1}/slown.pro") "%s" nil)
    ("slown_show" pro nil (lib . "{1}/slown.pro") "%s, image" nil)
    ("slown_plane_int" fun nil (lib . "{1}/slown.pro") "Result = %s(dummy)" nil)
    ("slown_erase" pro nil (lib . "{1}/slown.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{1}/slown.pro") "%s, c0, c1, faces, color" nil)
    ("DO_ISOSURFACE" pro nil (lib . "{1}/slown.pro") "%s" nil)
    ("slown_colors" pro nil (lib . "{1}/slown.pro") "%s, table" nil)
    ("slown_draw" pro nil (lib . "{1}/slown.pro") "%s, ax, slice" nil)
    ("slown_oblique" pro nil (lib . "{1}/slown.pro") "%s" nil)
    ("slown_orientation" pro nil (lib . "{1}/slown.pro") "%s, i" nil)
    ("SLOWN_UNDO" pro nil (lib . "{1}/slown.pro") "%s" nil)
    ("SLOWN_JOURNAL" pro nil (lib . "{1}/slown.pro") "%s, name, params" nil)
    ("SLOWN_PLAYBACK" pro nil (lib . "{1}/slown.pro") "%s, Commands" (("FILE")))
    ("slown_plane_int" fun nil (lib . "{1}/slown.pro") "Result = %s(dummy)" nil)
    ("p_inside_poly" fun nil (lib . "{1}/slown.pro") "Result = %s(poly, p)" nil)
    ("sline" pro nil (lib . "{1}/sline.pro") "%s, s1, s2, no, eps, xi, yi, zi" nil)
    ("setps" pro nil (lib . "{1}/setps.pro") "%s" nil)
    ("setcol3" pro nil (lib . "{1}/setcol3.pro") "%s, withgrey" nil)
    ("setcol2" pro nil (lib . "{1}/setcol2.pro") "%s, withgrey" nil)
    ("setcol" pro nil (lib . "{1}/setcol1.pro") "%s" nil)
    ("setcol" pro nil (lib . "{1}/setcol.pro") "%s, withgrey" nil)
    ("setc" pro nil (lib . "{1}/setc.pro") "%s, n, id, red, green, blue, r, g, b" nil)
    ("scross" pro nil (lib . "{1}/scrosst.pro") "%s, center, dir1, dir2, s1, s2, no, eps, xi, yi, zi" nil)
    ("projz" pro nil (lib . "{1}/projz.pro") "%s, zval, xli, yli" nil)
    ("projy" pro nil (lib . "{1}/projy.pro") "%s, yval, xli, zli" nil)
    ("projx" pro nil (lib . "{1}/projx.pro") "%s, xval, yli, zli" nil)
    ("ploinfo4f" pro nil (lib . "{1}/ploinfo4f.pro") "%s, fa, fb, fc, plane, fgroup, head1, head2" nil)
    ("ploinfo14f" pro nil (lib . "{1}/ploinfo14f.pro") "%s, fa, fb, fc, fc1, fc2, fc3, plane, fgroup, head4, head5" nil)
    ("image_c3" pro nil (lib . "{1}/image_c3.pro") "%s, a" (("ASPECT") ("INTERP") ("MAX_F") ("MIN_F") ("WINDOW_SCALE")))
    ("image_c" pro nil (lib . "{1}/image_c.pro") "%s, a" (("ASPECT") ("INTERP") ("MAX_F") ("MIN_F") ("WINDOW_SCALE")))
    ("FLINES" pro nil (lib . "{1}/flines.pro") "%s, BX, BY, BZ, X, Y, Z, XIN, YIN, ZIN, XMIN, XMAX, YMIN, YMAX, ZMIN, ZMAX, DELS, xline, yline, zline, nstep, inatot" nil)
    ("FLFLUX" pro nil (lib . "{1}/flflux.pro") "%s, BX, BY, BZ, X, Y, Z, XIN, YIN, ZIN, XMIN, XMAX, YMIN, YMAX, ZMIN, ZMAX, DELS, ff, nstep, inatot" nil)
    ("draw" pro nil (lib . "{1}/draw.pro") "%s, xli, yli, zli, style" nil)
    ("boxy" pro nil (lib . "{1}/boxy.pro") "%s, xmin, xmax, ymin, ymax, zmin, zmax, xang, yang, zang, persp" nil)
    ("box3d" pro nil (lib . "{1}/box3d.pro") "%s, xmin, xmax, ymin, ymax, zmin, zmax, xang, yang, zang, persp" nil)
    ("box1" pro nil (lib . "{1}/box1.pro") "%s, xmin, xmax, ymin, ymax, zmin, zmax, xang, yang, zang, persp" nil)
    ("VT3D" pro nil (lib . "{3}/vt3d.pro") "%s, whatplane, coor, xv, yv, zv, vxout, vyout, xout, yout" nil)
    ("V3D22D" pro nil (lib . "{3}/v3d22d.pro") "%s, whatplane, coor, xv, yv, zv, vxout, vyout, xout, yout" nil)
    ("anim_handler" pro nil (lib . "{3}/small.pro") "%s, ev" nil)
    ("slown" pro nil (lib . "{3}/slown.pro") "%s" (("CMD_FILE") ("COMMANDS") ("DETACHED") ("GROUP") ("RANGE") ("RESOLUTION")))
    ("slown_event" pro nil (lib . "{3}/slown.pro") "%s, ev" nil)
    ("mark_cube" pro nil (lib . "{3}/slown.pro") "%s, ev" nil)
    ("mark_cube1" pro nil (lib . "{3}/slown.pro") "%s, p0, ip" nil)
    ("do_cube" pro nil (lib . "{3}/slown.pro") "%s" nil)
    ("mark_slice" pro nil (lib . "{3}/slown.pro") "%s, ev" nil)
    ("mark_oblique" pro nil (lib . "{3}/slown.pro") "%s, color" nil)
    ("draw_orientation" pro nil (lib . "{3}/slown.pro") "%s" nil)
    ("slown_postscript" pro nil (lib . "{3}/slown.pro") "%s" nil)
    ("slown_show" pro nil (lib . "{3}/slown.pro") "%s, image" nil)
    ("slown_plane_int" fun nil (lib . "{3}/slown.pro") "Result = %s(dummy)" nil)
    ("slown_erase" pro nil (lib . "{3}/slown.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{3}/slown.pro") "%s, c0, c1, faces, color" nil)
    ("DO_ISOSURFACE" pro nil (lib . "{3}/slown.pro") "%s" nil)
    ("slown_colors" pro nil (lib . "{3}/slown.pro") "%s, table" nil)
    ("slown_draw" pro nil (lib . "{3}/slown.pro") "%s, ax, slice" nil)
    ("slown_oblique" pro nil (lib . "{3}/slown.pro") "%s" nil)
    ("slown_orientation" pro nil (lib . "{3}/slown.pro") "%s, i" nil)
    ("SLOWN_UNDO" pro nil (lib . "{3}/slown.pro") "%s" nil)
    ("SLOWN_JOURNAL" pro nil (lib . "{3}/slown.pro") "%s, name, params" nil)
    ("SLOWN_PLAYBACK" pro nil (lib . "{3}/slown.pro") "%s, Commands" (("FILE")))
    ("slown_plane_int" fun nil (lib . "{3}/slown.pro") "Result = %s(dummy)" nil)
    ("p_inside_poly" fun nil (lib . "{3}/slown.pro") "Result = %s(poly, p)" nil)
    ("PLOT3D" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("show" pro nil (lib . "{3}/plotgiff.pro") "%s, image" nil)
    ("erasep" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("undo" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("postbw" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("post" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("anim" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("isosurf" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("histo" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("draw_slice" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{3}/plotgiff.pro") "%s, c0, c1, faces, win" nil)
    ("draw_orientation" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("orient" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("plotgif" pro nil (lib . "{3}/plotgiff.pro") "%s" nil)
    ("PLOT3DDD" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("show" pro nil (lib . "{3}/plot3ddd.pro") "%s, image" nil)
    ("erasep" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("undo" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("post" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("anim" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("isosurf" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("histo" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("draw_slice" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("draw_coor" pro nil (lib . "{3}/plot3ddd.pro") "%s, c0, c1, faces, win" nil)
    ("draw_cube" pro nil (lib . "{3}/plot3ddd.pro") "%s, c0, c1, faces, win" nil)
    ("draw_orientation" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("orient" pro nil (lib . "{3}/plot3ddd.pro") "%s" nil)
    ("PLOT3DARC" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("show" pro nil (lib . "{3}/plot3darc.pro") "%s, image" nil)
    ("erasep" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("undo" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("post" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("anim" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("isosurf" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("histo" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("draw_slice" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{3}/plot3darc.pro") "%s, c0, c1, faces, win" nil)
    ("draw_orientation" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("orient" pro nil (lib . "{3}/plot3darc.pro") "%s" nil)
    ("PLOT3D" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("show" pro nil (lib . "{3}/plot3d.pro") "%s, image" nil)
    ("erasep" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("undo" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("postbw" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("post" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("gif" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("anim" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("isosurf" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("histo" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("draw_slice" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{3}/plot3d.pro") "%s, c0, c1, faces, win" nil)
    ("draw_orientation" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("orient" pro nil (lib . "{3}/plot3d.pro") "%s" nil)
    ("show" pro nil (lib . "{3}/plagu1.pro") "%s, image" nil)
    ("erasep" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("undo" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("postbw" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("post" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("gif" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("anim" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("isosurf" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("histo" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("draw_slice" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{3}/plagu1.pro") "%s, c0, c1, faces, win" nil)
    ("draw_orientation" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("orient" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("infield" pro nil (lib . "{3}/plagu1.pro") "%s" nil)
    ("show" pro nil (lib . "{3}/plagu.pro") "%s, image" nil)
    ("erasep" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("undo" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("postbw" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("post" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("gif" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("anim" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("isosurf" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("histo" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("draw_slice" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{3}/plagu.pro") "%s, c0, c1, faces, win" nil)
    ("draw_orientation" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("orient" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("infield" pro nil (lib . "{3}/plagu.pro") "%s" nil)
    ("anim_handler" pro nil (lib . "{3}/gifanim.pro") "%s, ev" nil)
    ("show" pro nil (lib . "{3}/flagu1.pro") "%s, image" nil)
    ("erasep" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("undo" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("postbw" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("post" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("gif" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("anim" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("isosurf" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("histo" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("draw_slice" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{3}/flagu1.pro") "%s, c0, c1, faces, win" nil)
    ("draw_orientation" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("orient" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("infield" pro nil (lib . "{3}/flagu1.pro") "%s" nil)
    ("show" pro nil (lib . "{3}/flagu.pro") "%s, image" nil)
    ("erasep" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("undo" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("postbw" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("post" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("gif" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("anim" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("isosurf" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("histo" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("draw_slice" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{3}/flagu.pro") "%s, c0, c1, faces, win" nil)
    ("draw_orientation" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("orient" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("infield" pro nil (lib . "{3}/flagu.pro") "%s" nil)
    ("anim_handler" pro nil (lib . "{3}/cbig.pro") "%s, ev" nil)
    ("boxy" pro nil (lib . "{3}/boxy.pro") "%s, xmin, xmax, ymin, ymax, zmin, zmax, xang, yang, zang, persp" nil)
    ("anim_handler" pro nil (lib . "{3}/big.pro") "%s, ev" nil)
    ("reseng" pro nil (lib . "{4}/reseng.pro") "%s" nil)
    ("pltqbizc" pro nil (lib . "{4}/pltqbizc.pro") "%s" (("ps")))
    ("pltfvratc" pro nil (lib . "{4}/pltfvratc.pro") "%s" (("ps")))
    ("pltftvc" pro nil (lib . "{4}/pltftvc.pro") "%s" (("ps")))
    ("phiindex" fun nil (lib . "{4}/pltftvc.pro") "Result = %s(phi0)" nil)
    ("rhoindex" fun nil (lib . "{4}/pltftvc.pro") "Result = %s(rho0)" nil)
    ("pltSc" pro nil (lib . "{4}/pltSc.pro") "%s" (("ps")))
    ("phiindex" fun nil (lib . "{4}/pltSc.pro") "Result = %s(phi0)" nil)
    ("rhoindex" fun nil (lib . "{4}/pltSc.pro") "Result = %s(rho0)" nil)
    ("pltPc" pro nil (lib . "{4}/pltPc.pro") "%s" (("ps")))
    ("phiindex" fun nil (lib . "{4}/pltPc.pro") "Result = %s(phi0)" nil)
    ("rhoindex" fun nil (lib . "{4}/pltPc.pro") "Result = %s(rho0)" nil)
    ("pl1d" pro nil (lib . "{4}/pl1d.pro") "%s, farr, nx, x, itot, amin, amax, time, delt, svalue, rms, pos, xtit" nil)
    ("mpdiag" pro nil (lib . "{4}/mpdiag.pro") "%s" (("ps")))
    ("phiindex" fun nil (lib . "{4}/mpdiag.pro") "Result = %s(phi0)" nil)
    ("rhoindex" fun nil (lib . "{4}/mpdiag.pro") "Result = %s(rho0)" nil)
    ("mpcross" pro nil (lib . "{4}/mpcross.pro") "%s" (("ps")))
    ("diagnos" pro nil (lib . "{4}/diagnos.pro") "%s" (("ps")))
    ("phiindex" fun nil (lib . "{4}/diagnos.pro") "Result = %s(phi0)" nil)
    ("rhoindex" fun nil (lib . "{4}/diagnos.pro") "Result = %s(rho0)" nil)
    ("combo04" pro nil (lib . "{4}/combo04.pro") "%s" (("ps")))
    ("phiindex" fun nil (lib . "{4}/combo04.pro") "Result = %s(phi0)" nil)
    ("rhoindex" fun nil (lib . "{4}/combo04.pro") "Result = %s(rho0)" nil)
    ("PLineswhy" pro nil (lib . "{4}/PLineswhy.pro") "%s" (("ps")))
    ("VECT" pro nil (lib . "{5}/vect.pro") "%s, U, V, X, Y" (("color") ("Dots") ("Length") ("Missing") ("noerase") ("position") ("Sizerat") ("Title")))
    ("vecpoty" pro nil (lib . "{5}/vecpoty.pro") "%s, nx, ny, x, y, bx, by, a, fmin, fmax" nil)
    ("vecpotx" pro nil (lib . "{5}/vecpotx.pro") "%s, nx, ny, x, y, bx, by, a, fmin, fmax" nil)
    ("vecpotkh" pro nil (lib . "{5}/vecpotkh.pro") "%s, nx, ny, x, y, bx, by, a, fmin, fmax" nil)
    ("vecpot2" pro nil (lib . "{5}/vecpot2.pro") "%s, nx, ny, x, y, bx, by, a, fmin, fmax" nil)
    ("vecplot" pro nil (lib . "{5}/vecplot.pro") "%s, fa, fb, fn1, fn2, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("vcplot" pro nil (lib . "{5}/vcplot.pro") "%s, f1, f2, fv1, fv2, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt, aval" nil)
    ("vcfplot" pro nil (lib . "{5}/vcfplot.pro") "%s, f1, f2, fv1, fv2, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt, aval, xt, yt" nil)
    ("testbdtail" pro nil (lib . "{5}/testbdtail.pro") "%s, nx, ny, x, y, xmin, xmax, ymin, ymax" nil)
    ("testbd1" pro nil (lib . "{5}/testbd1.pro") "%s, nx, ny, x, y, xmin, xmax, ymin, ymax" nil)
    ("testbd" pro nil (lib . "{5}/testbd.pro") "%s, nx, ny, x, y, xmin, xmax, ymin, ymax" nil)
    ("smo" pro nil (lib . "{5}/smo.pro") "%s, fin, fout, dir" nil)
    ("setcol1" pro nil (lib . "{5}/setcol1.pro") "%s, withgrey" nil)
    ("setcol" pro nil (lib . "{5}/setcol.pro") "%s, withgrey" nil)
    ("scplot2" pro nil (lib . "{5}/scplot2.pro") "%s, f1, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("scplot1" pro nil (lib . "{5}/scplot1.pro") "%s, f1, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("scaplot2" pro nil (lib . "{5}/scaplot2.pro") "%s, fa, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("scaplot1" pro nil (lib . "{5}/scaplot1.pro") "%s, fa, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("rotconf" pro nil (lib . "{5}/rotconf.pro") "%s, by, bz, byrot, bzrot, phi" nil)
    ("readtr" pro nil (lib . "{5}/readtr.pro") "%s, fnumber, xt, yt, zt" nil)
    ("read2hall" pro nil (lib . "{5}/read2hall.pro") "%s, g1, g2, g3, h1, h2, h3, bx, by, bz, vx, vy, vz, vex, vey, vez, rho, u, res" nil)
    ("read2dtail" pro nil (lib . "{5}/read2dtail.pro") "%s, g1, g2, g3, h1, h2, h3, bx, by, bz, vx, vy, vz, rho, u, res" nil)
    ("read2df" pro nil (lib . "{5}/read2df.pro") "%s, g1, g2, g3, h1, h2, h3, bx, by, bz, vx, vy, vz, rho, u, res, fnumber" nil)
    ("read2d" pro nil (lib . "{5}/read2d.pro") "%s, g1, g2, g3, h1, h2, h3, bx, by, bz, vx, vy, vz, rho, u, res" nil)
    ("jandeh1" pro nil (lib . "{5}/jandeh1.pro") "%s, nx, ny, g1, h1, bx, by, bz, vex, vey, res, jx, jy, jz, ez" nil)
    ("jandeh" pro nil (lib . "{5}/jandeh.pro") "%s, nx, ny, g1, h1, bx, by, vex, vey, res, jz, ez" nil)
    ("jande1" pro nil (lib . "{5}/jande1.pro") "%s, nx, ny, g1, h1, bx, by, vx, vy, res, jz, ez" nil)
    ("jande" pro nil (lib . "{5}/jande.pro") "%s, nx, ny, g1, h1, bx, by, vx, vy, res, jz, ez" nil)
    ("image_c" pro nil (lib . "{5}/image_c1.pro") "%s, a" (("ASPECT") ("INTERP") ("WINDOW_SCALE")))
    ("grid2d" pro nil (lib . "{5}/grid2d.pro") "%s, x, y, xmin, xmax, ymin, ymax, nxn, nyn, xn, yn, iox, ioy, dxn, dyn" nil)
    ("ctvec" pro nil (lib . "{5}/ctvec.pro") "%s, f2, fv1, fv2, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt, aval" nil)
    ("ctsca2" pro nil (lib . "{5}/ctsca2.pro") "%s, f1, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("ctsca1" pro nil (lib . "{5}/ctsca1.pro") "%s, f1, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("ctfvec" pro nil (lib . "{5}/ctfvec.pro") "%s, f2, fv1, fv2, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt, aval, xt, yt" nil)
    ("contvec" pro nil (lib . "{5}/contvec.pro") "%s, fb, fn1, fn2, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("contsca2" pro nil (lib . "{5}/contsca2.pro") "%s, fa, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("contsca1" pro nil (lib . "{5}/contsca1.pro") "%s, fa, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("asymvel" pro nil (lib . "{5}/asymvel.pro") "%s, nx, ny, vy, vy1, vy2, vyav" nil)
    ("asymval" pro nil (lib . "{5}/asymval.pro") "%s, nx, ny, v, v1, v2, vav" nil)
    ("vecplot" pro nil (lib . "{6}/vecplot.pro") "%s, fa, fb, fn1, fn2, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, glatt" nil)
    ("path" pro nil (lib . "{6}/path.pro") "%s" nil)
    ("combo04" pro nil (lib . "{6}/combo04.pro") "%s" (("ps")))
    ("phiindex" fun nil (lib . "{6}/combo04.pro") "Result = %s(phi0)" nil)
    ("rhoindex" fun nil (lib . "{6}/combo04.pro") "Result = %s(rho0)" nil)
    ("combo03" pro nil (lib . "{6}/combo03.pro") "%s" (("ps")))
    ("phiindex" fun nil (lib . "{6}/combo03.pro") "Result = %s(phi0)" nil)
    ("rhoindex" fun nil (lib . "{6}/combo03.pro") "Result = %s(rho0)" nil)
    ("VELOVECT" pro nil (lib . "{7}/veloalt.pro") "%s, U, V, X, Y" (("color") ("Dots") ("Length") ("Missing") ("noerase") ("position") ("Title")))
    ("vplot" pro nil (lib . "{9}/vplot.pro") "%s, far1, far2, xar, yar, length, pos, head, cutata, cutatb, time, run, xpos, yposa, yposb, ypos1, ypos2, ypos3, ypos4" nil)
    ("vecparc" pro nil (lib . "{9}/vecparc.pro") "%s, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("vecp" pro nil (lib . "{9}/vecp.pro") "%s, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("testbd3" pro nil (lib . "{9}/testbd3.pro") "%s, nx, ny, nz, x, y, z, xmin, xmax, ymin, ymax, zmin, zmax" nil)
    ("testbd" pro nil (lib . "{9}/testbd.pro") "%s, nx, ny, x, y, xmin, xmax, ymin, ymax" nil)
    ("PFEILE" pro nil (lib . "{9}/tas3p.pro") "%s, U, V, X, Y" (("_EXTRA") ("Color") ("Dots") ("Length") ("Missing")))
    ("gitt" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("screenaus" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("bi" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("psaus" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("GRIDNEU" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("GLATT" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("plg" pro nil (lib . "{9}/tas3p.pro") "%s" (("ax") ("az") ("cp") ("ma1") ("ma2") ("mi1") ("mi2") ("nl") ("xnull") ("ynull") ("znull")))
    ("plinit" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("FELDWAHL" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("les" pro nil (lib . "{9}/tas3p.pro") "%s" nil)
    ("PFEILE" pro nil (lib . "{9}/tas3n.pro") "%s, U, V, X, Y" (("_EXTRA") ("Color") ("Dots") ("Length") ("Missing")))
    ("gitt" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("screenaus" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("bi" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("psaus" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("GRIDNEU" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("GLATT" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("plg" pro nil (lib . "{9}/tas3n.pro") "%s" (("ax") ("az") ("cp") ("ma1") ("ma2") ("mi1") ("mi2") ("nl") ("xnull") ("ynull") ("znull")))
    ("plinit" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("FELDWAHL" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("les" pro nil (lib . "{9}/tas3n.pro") "%s" nil)
    ("PFEILE" pro nil (lib . "{9}/t3p.pro") "%s, U, V, X, Y" (("_EXTRA") ("Color") ("Dots") ("Length") ("Missing")))
    ("gitt" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("screenaus" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("bi" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("psaus" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("GRIDNEU" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("GLATT" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("plg" pro nil (lib . "{9}/t3p.pro") "%s" (("ax") ("az") ("cp") ("ma1") ("ma2") ("mi1") ("mi2") ("nl") ("xnull") ("ynull") ("znull")))
    ("plinit" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("FELDWAHL" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("les" pro nil (lib . "{9}/t3p.pro") "%s" nil)
    ("PFEILE" pro nil (lib . "{9}/t3n.pro") "%s, U, V, X, Y" (("_EXTRA") ("Color") ("Dots") ("Length") ("Missing")))
    ("gitt" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("screenaus" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("bi" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("psaus" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("GRIDNEU" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("GLATT" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("plg" pro nil (lib . "{9}/t3n.pro") "%s" (("ax") ("az") ("cp") ("ma1") ("ma2") ("mi1") ("mi2") ("nl") ("xnull") ("ynull") ("znull")))
    ("plinit" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("FELDWAHL" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("les" pro nil (lib . "{9}/t3n.pro") "%s" nil)
    ("strno" fun nil (lib . "{9}/strno.pro") "Result = %s(a)" nil)
    ("sca2arc" pro nil (lib . "{9}/sca2arc.pro") "%s, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("sca2" pro nil (lib . "{9}/sca2.pro") "%s, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("sca1arc" pro nil (lib . "{9}/sca1arc.pro") "%s, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("sca1" pro nil (lib . "{9}/sca1.pro") "%s, pos1, pos2, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("read3sym" pro nil (lib . "{9}/read3sym.pro") "%s, dx, dxh, dy, dyh, dz, dzh, bx, by, bz, sx, sy, sz, rho, u, res" nil)
    ("read3darc" pro nil (lib . "{9}/read3darc.pro") "%s, dx, dxh, dy, dyh, dz, dzh, bx, by, bz, sx, sy, sz, rho, u, res" nil)
    ("read3d" pro nil (lib . "{9}/read3d.pro") "%s, dx, dxh, dy, dyh, dz, dzh, bx, by, bz, sx, sy, sz, rho, u, res" nil)
    ("printstuff" pro nil (lib . "{9}/printstuff.pro") "%s, bx, by, bz, sx, sy, sz, rho, u, res" nil)
    ("ploinfo1" pro nil (lib . "{9}/ploinfo1.pro") "%s, fa, fb, fc, fc1, fc2, fc3, plane, fgroup, head4, head5" nil)
    ("ploinfo" pro nil (lib . "{9}/ploinfo.pro") "%s, fa, fb, fc, plane, fgroup, head1, head2" nil)
    ("pcont1" pro nil (lib . "{9}/pcont1.pro") "%s, fa, xsu, ysu, contin, pos, equi, delc, nlev, head, xtit, ytit, cutata, cutatb, time, run, xpos, yposa, yposb, ypos1, ypos2, ypos3, ypos4, ypos5, ypos6" nil)
    ("pcont" pro nil (lib . "{9}/pcont.pro") "%s, fa, xsu, ysu, contin, pos, head, xtit, ytit, cutata, cutatb, time, run, xpos, yposa, yposb, ypos1, ypos2, ypos3, ypos4, ypos5, ypos6" nil)
    ("norm" pro nil (lib . "{9}/norm.pro") "%s, nr, zcoor, zmin, zmax, rhop, temp, pp1, vash1, db1, ec1, epar1, j1, resfac1, dcs1" nil)
    ("newgrid" pro nil (lib . "{9}/newgrid.pro") "%s, x, y, z, xmin, xmax, ymin, ymax, zmin, zmax, nxn, nyn, nzn, xn, yn, zn, iox, ioy, ioz, dxn, dyn, dzn" nil)
    ("grid3d" pro nil (lib . "{9}/grid3d.pro") "%s, x, y, z, xmin, xmax, ymin, ymax, zmin, zmax, nxn, nyn, nzn, xn, yn, zn, iox, ioy, ioz, dxn, dyn, dzn" nil)
    ("covec" pro nil (lib . "{9}/covec.pro") "%s, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("cont2" pro nil (lib . "{9}/cont2.pro") "%s, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("cont1" pro nil (lib . "{9}/cont1.pro") "%s, pos1, xpos, ypos, nl1, nl2, names, titl, xtitl, ytitl, smo, plane" nil)
    ("chcolorscale" pro nil (lib . "{9}/chcolorscale.pro") "%s, titl, bmin, bmax, fmin, fmax" nil)
    ("vplot" pro nil (lib . "{11}/vplot.pro") "%s, far1, far2, xar, yar, length, pos, head, cutata, cutatb, time, run, xpos, yposa, yposb, ypos1, ypos2, ypos3, ypos4" nil)
    ("VECT" pro nil (lib . "{11}/vect.pro") "%s, U, V, X, Y" (("color") ("Dots") ("Length") ("Missing") ("noerase") ("position") ("Sizerat") ("Title")))
    ("testbd3" pro nil (lib . "{11}/testbd3.pro") "%s, nx, ny, nz, x, y, z, xmin, xmax, ymin, ymax, zmin, zmax" nil)
    ("strno" fun nil (lib . "{11}/strno.pro") "Result = %s(a)" nil)
    ("solar_ion" pro nil (lib . "{11}/solar_ion.pro") "%s" (("_extra") ("f107") ("sza") ("zmax") ("zmin")))
    ("get_ionrate" pro nil (lib . "{11}/solar_ion.pro") "%s, flux, sigmaN2, sigmaO2, sigmaO, sigmaN2p, sigmaO2p, sigmaOp, N2ionr, O2ionr, Oionr" (("slant")))
    ("geocorona_ion" pro nil (lib . "{11}/solar_ion.pro") "%s, f107, geo_N2, geo_O2, geo_O" nil)
    ("xray_ion" pro nil (lib . "{11}/solar_ion.pro") "%s, f107, x_N2, x_O2, x_O" nil)
    ("sol_xray" fun nil (lib . "{11}/solar_ion.pro") "Result = %s(f107)" nil)
    ("euv_ion" pro nil (lib . "{11}/solar_ion.pro") "%s, f107, EUV_N2, EUV_O2, EUV_O" nil)
    ("sol_flux" fun nil (lib . "{11}/solar_ion.pro") "Result = %s(f107)" nil)
    ("get_density" pro nil (lib . "{11}/solar_ion.pro") "%s, f107, sza, zmin, zmax, z" nil)
    ("column_den" fun nil (lib . "{11}/solar_ion.pro") "Result = %s(den, zz)" nil)
    ("plttpmapc" pro nil (lib . "{11}/plttpmapc.pro") "%s" (("ps")))
    ("pltftvc" pro nil (lib . "{11}/pltftvc.pro") "%s" (("ps")))
    ("plotit" pro nil (lib . "{11}/plotit3.pro") "%s" nil)
    ("plotit1" pro nil (lib . "{11}/plotit1.pro") "%s" nil)
    ("plotit" pro nil (lib . "{11}/plotit.pro") "%s" nil)
    ("pcont" pro nil (lib . "{11}/pcont.pro") "%s, fa, xsu, ysu, contin, pos, head, xtit, ytit, cutata, cutatb, time, run, xpos, yposa, yposb, ypos1, ypos2, ypos3, ypos4, ypos5, ypos6" nil)
    ("norm" pro nil (lib . "{11}/norm.pro") "%s, nr, zcoor, zmin, zmax, rhop, temp, pp1, vash1, db1, ec1, epar1, j1, resfac1, dcs1" nil)
    ("newgrid" pro nil (lib . "{11}/newgrid.pro") "%s, x, y, z, xmin, xmax, ymin, ymax, zmin, zmax, nxn, nyn, nzn, xn, yn, zn, iox, ioy, ioz, dxn, dyn, dzn" nil)
    ("msis" pro nil (lib . "{11}/msis.pro") "%s" (("altitude") ("ap") ("Arden") ("f107") ("glat") ("glon") ("Hden") ("Heden") ("hour") ("mlyr") ("N2den") ("Nden") ("O2den") ("Oden") ("plot") ("rho") ("temperature") ("yyddd") ("zmax") ("zmin")))
    ("log_label" fun nil (lib . "{11}/log_label.pro") "Result = %s(axis, index, value)" nil)
    ("load_mycolor" pro nil (lib . "{11}/load_mycolor.pro") "%s" (("aurora") ("reverse") ("video")))
    ("image" pro nil (lib . "{11}/image.pro") "%s, a, x, y" (("_extra") ("nocolorbar") ("reverse") ("space") ("units") ("zlog") ("zmax") ("zmin")))
    ("contplot" pro nil (lib . "{11}/contplot.pro") "%s, f, xa, xe, ylo, yup, format, xtit, tit, rtime, dl, m" nil)
    ("chapman" fun nil (lib . "{11}/chapman.pro") "Result = %s(z, sza, scaleheight)" (("shadow") ("zmin")))
    ("erf" fun nil (lib . "{11}/chapman.pro") "Result = %s(x)" nil)
    ("erfc" fun nil (lib . "{11}/chapman.pro") "Result = %s(x)" nil)
    ("XSurf" pro nil (lib . "{12}/xsurf.pro") "%s, DATA, X, Y" (("_extra") ("GROUP")))
    ("XSurf_ev" pro nil (lib . "{12}/xsurf.pro") "%s, event" nil)
    ("XSurface_draw" pro nil (lib . "{12}/xsurf.pro") "%s" (("_extra")))
    ("type" fun nil (lib . "{12}/type.pro") "Result = %s(item)" (("text")))
    ("trap" fun nil (lib . "{12}/trap.pro") "Result = %s(y, x)" (("limits") ("noextrapol")))
    ("time_axis" pro nil (lib . "{12}/time_axis.pro") "%s, time" (("debug") ("minor") ("reset") ("steps") ("xrange") ("xtitle")))
    ("tiles" pro nil (lib . "{12}/tiles.pro") "%s, in" (("bw") ("color")))
    ("change_color" pro nil (lib . "{12}/tiles.pro") "%s" nil)
    ("uncover" pro nil (lib . "{12}/tiles.pro") "%s, iin, jin, iout, jout, zeros" nil)
    ("check_neighbors" pro nil (lib . "{12}/tiles.pro") "%s, i, j" nil)
    ("show_all" pro nil (lib . "{12}/tiles.pro") "%s" nil)
    ("startup" pro nil (lib . "{12}/tiles.pro") "%s" nil)
    ("tetris" pro nil (lib . "{12}/tetris.pro") "%s" (("bell") ("help") ("level") ("top") ("wait")))
    ("t_help" pro nil (lib . "{12}/tetris.pro") "%s" nil)
    ("t_score" pro nil (lib . "{12}/tetris.pro") "%s, r" nil)
    ("t_plot" pro nil (lib . "{12}/tetris.pro") "%s, flag" nil)
    ("t_rot" pro nil (lib . "{12}/tetris.pro") "%s" nil)
    ("t_right" pro nil (lib . "{12}/tetris.pro") "%s" nil)
    ("t_left" pro nil (lib . "{12}/tetris.pro") "%s" nil)
    ("t_drop" pro nil (lib . "{12}/tetris.pro") "%s" (("done") ("range")))
    ("t_next" pro nil (lib . "{12}/tetris.pro") "%s, pn" nil)
    ("t_init" pro nil (lib . "{12}/tetris.pro") "%s, wt, lev" (("bell")))
    ("test" pro nil (lib . "{12}/test1.pro") "%s" nil)
    ("test_event" pro nil (lib . "{12}/test1.pro") "%s, event" nil)
    ("test" pro nil (lib . "{12}/test.pro") "%s" nil)
    ("test_event" pro nil (lib . "{12}/test.pro") "%s, event" nil)
    ("subsol" pro nil (lib . "{12}/subsol.pro") "%s, year, doy, sbsllat, sbsllon" (("time") ("utsec")))
    ("step" pro nil (lib . "{12}/step.pro") "%s, x, y" (("_extra") ("layers") ("left") ("oplot")))
    ("spheric_coord" fun nil (lib . "{12}/spheric_coord.pro") "Result = %s(a_in, theta, phi)" (("inverse")))
    ("solar_ion" pro nil (lib . "{12}/solar_ion.pro") "%s" (("_extra") ("f107") ("sza") ("zmax") ("zmin")))
    ("get_ionrate" pro nil (lib . "{12}/solar_ion.pro") "%s, flux, sigmaN2, sigmaO2, sigmaO, sigmaN2p, sigmaO2p, sigmaOp, N2ionr, O2ionr, Oionr" (("slant")))
    ("geocorona_ion" pro nil (lib . "{12}/solar_ion.pro") "%s, f107, geo_N2, geo_O2, geo_O" nil)
    ("xray_ion" pro nil (lib . "{12}/solar_ion.pro") "%s, f107, x_N2, x_O2, x_O" nil)
    ("sol_xray" fun nil (lib . "{12}/solar_ion.pro") "Result = %s(f107)" nil)
    ("euv_ion" pro nil (lib . "{12}/solar_ion.pro") "%s, f107, EUV_N2, EUV_O2, EUV_O" nil)
    ("sol_flux" fun nil (lib . "{12}/solar_ion.pro") "Result = %s(f107)" nil)
    ("get_density" pro nil (lib . "{12}/solar_ion.pro") "%s, f107, sza, zmin, zmax, z" nil)
    ("column_den" fun nil (lib . "{12}/solar_ion.pro") "Result = %s(den, zz)" nil)
    ("SIGN" fun nil (lib . "{12}/sign.pro") "Result = %s(X)" (("help")))
    ("show_kp" pro nil (lib . "{12}/show_kp.pro") "%s, year, out" (("date")))
    ("setps" pro nil (lib . "{12}/setps.pro") "%s" (("_extra") ("back")))
    ("read_str" fun nil (lib . "{12}/read_str.pro") "Result = %s(a)" (("number") ("separator")))
    ("plotitt" pro nil (lib . "{12}/plotitt.pro") "%s" nil)
    ("plotit4" pro nil (lib . "{12}/plotit4.pro") "%s" nil)
    ("plotit3" pro nil (lib . "{12}/plotit3.pro") "%s" nil)
    ("plotit2" pro nil (lib . "{12}/plotit2.pro") "%s" nil)
    ("plotit1" pro nil (lib . "{12}/plotit1.pro") "%s" nil)
    ("plotit" pro nil (lib . "{12}/plotit.pro") "%s" nil)
    ("plot3d" pro nil (lib . "{12}/plot3d.pro") "%s, px, py, pz" (("_extra") ("b_lines") ("projection") ("skirt")))
    ("param_edep" pro nil (lib . "{12}/param_edep.pro") "%s, e_0, f_e" (("_extra") ("altitude") ("edep") ("ion") ("plot") ("proton") ("zmax") ("zmin")))
    ("column" fun nil (lib . "{12}/param_edep.pro") "Result = %s(rho, z)" nil)
    ("OPLOTERR" pro nil (lib . "{12}/oploterr.pro") "%s, X, Y, ERR, PSYM" nil)
    ("image" pro nil (lib . "{12}/old_image.pro") "%s, a, x, y" (("io") ("oi") ("oo") ("title") ("units") ("xstyle") ("xtitle") ("ystyle") ("ytitle")))
    ("msis" pro nil (lib . "{12}/msis.pro") "%s" (("altitude") ("ap") ("Arden") ("f107") ("glat") ("glon") ("Hden") ("Heden") ("hour") ("mlyr") ("N2den") ("Nden") ("O2den") ("Oden") ("plot") ("rho") ("temperature") ("yyddd") ("zmax") ("zmin")))
    ("msg_out" pro nil (lib . "{12}/msg_out.pro") "%s, in_text" (("group") ("kill") ("max_lines") ("xoffset") ("yoffset")))
    ("mk_msg_base" pro nil (lib . "{12}/msg_out.pro") "%s, xoff, yoff" (("group")))
    ("month_name" fun nil (lib . "{12}/month_name.pro") "Result = %s(m)" (("short")))
    ("mmin" fun nil (lib . "{12}/mmin.pro") "Result = %s(array, min_subscript)" (("above") ("max")))
    ("log_label" fun nil (lib . "{12}/log_label.pro") "Result = %s(axis, index, value)" nil)
    ("load_tvcolor" pro nil (lib . "{12}/load_tvcolor.pro") "%s" nil)
    ("load_mycolor" pro nil (lib . "{12}/load_mycolor.pro") "%s" (("aurora") ("reverse") ("video")))
    ("lhelp" pro nil (lib . "{12}/lhelp.pro") "%s" (("update")))
    ("image2" pro nil (lib . "{12}/image2.pro") "%s, a, x, y" (("_extra") ("nocolorbar") ("reverse") ("space") ("units") ("zlog") ("zmax") ("zmin")))
    ("image" pro nil (lib . "{12}/image.pro") "%s, a, x, y" (("_extra") ("nocolorbar") ("reverse") ("space") ("units") ("zlog") ("zmax") ("zmin")))
    ("hhmm" fun nil (lib . "{12}/hhmm.pro") "Result = %s(hour)" (("nocolon") ("second")))
    ("get_Pcond" fun nil (lib . "{12}/get_pcond.pro") "Result = %s(energy, flux)" (("silent")))
    ("get_Hcond" fun nil (lib . "{12}/get_hcond.pro") "Result = %s(energy, flux)" (("silent")))
    ("fill_plt" pro nil (lib . "{12}/fill_plt.pro") "%s, x, y" (("_extra") ("color") ("nofill") ("width")))
    ("erfc" fun nil (lib . "{12}/erfc.pro") "Result = %s(x)" nil)
    ("energy_flux" pro nil (lib . "{12}/energy_flux.pro") "%s, energy, flux" (("i3914") ("i4278") ("i4709") ("i6300") ("i8446") ("silent")))
    ("get_energy" fun nil (lib . "{12}/energy_flux.pro") "Result = %s(ratio)" (("line")))
    ("doy_mmdd" fun nil (lib . "{12}/doy_mmdd.pro") "Result = %s(year, month, day)" (("doy")))
    ("dec_hour" fun nil (lib . "{12}/dec_hour.pro") "Result = %s(time)" nil)
    ("clock" pro nil (lib . "{12}/clock.pro") "%s, hour, minute, xpos, ypos" (("size")))
    ("chapman" fun nil (lib . "{12}/chapman1.pro") "Result = %s(z, sza, scaleheight)" (("shadow")))
    ("erf" fun nil (lib . "{12}/chapman1.pro") "Result = %s(x)" nil)
    ("erfc" fun nil (lib . "{12}/chapman1.pro") "Result = %s(x)" nil)
    ("chapman" fun nil (lib . "{12}/chapman.pro") "Result = %s(z, sza, scaleheight)" (("shadow") ("zmin")))
    ("erf" fun nil (lib . "{12}/chapman.pro") "Result = %s(x)" nil)
    ("erfc" fun nil (lib . "{12}/chapman.pro") "Result = %s(x)" nil)
    ("tetris" pro nil (lib . "{12}/bw_tetris.pro") "%s" (("bell") ("help") ("level") ("top") ("wait")))
    ("t_help" pro nil (lib . "{12}/bw_tetris.pro") "%s" nil)
    ("t_score" pro nil (lib . "{12}/bw_tetris.pro") "%s, r" nil)
    ("t_plot" pro nil (lib . "{12}/bw_tetris.pro") "%s, flag" nil)
    ("t_rot" pro nil (lib . "{12}/bw_tetris.pro") "%s" nil)
    ("t_right" pro nil (lib . "{12}/bw_tetris.pro") "%s" nil)
    ("t_left" pro nil (lib . "{12}/bw_tetris.pro") "%s" nil)
    ("t_drop" pro nil (lib . "{12}/bw_tetris.pro") "%s" (("done") ("range")))
    ("t_next" pro nil (lib . "{12}/bw_tetris.pro") "%s, pn" nil)
    ("t_init" pro nil (lib . "{12}/bw_tetris.pro") "%s, wt, lev" (("bell")))
    ("boxcar" fun nil (lib . "{12}/boxcar.pro") "Result = %s(f)" (("length")))
    ("bleed" fun nil (lib . "{12}/bleed.pro") "Result = %s(array)" (("delta_value") ("strength") ("value") ("width")))
    ("binary" fun nil (lib . "{12}/binary.pro") "Result = %s(i)" nil)
    ("trafo" pro nil (lib . "{13}/ttt.pro") "%s, M, xin, yin, zin, xout, yout, zout" nil)
    ("VARIANCE" pro nil (lib . "{14}/variance.pro") "%s, II, JJ, N, X, M" nil)
    ("FHODOGRAMS" pro nil (lib . "{14}/fhodograms.pro") "%s, IT1, IBEG, IEND, X, EVEC, DIRS, PT, BINIT" nil)
    ("EVECS_ERROR" pro nil (lib . "{14}/evecs_error.pro") "%s, M, D, E, EVAL, MAXDIR, MINDIR, INTDIR, EVEC, UNIT" nil)
    ("EVECS" pro nil (lib . "{14}/evecs.pro") "%s, M, D, E, EVAL, MAXDIR, MINDIR, INTDIR, EVEC" nil)
    ("EVEC_ERROR" pro nil (lib . "{14}/evec_error.pro") "%s, M, D, E, EVAL, MAXDIR, MINDIR, INTDIR, EVEC, UNIT" nil)
    ("CHODOGRAMS" pro nil (lib . "{14}/chodograms.pro") "%s, IT1, IBEG, IEND, X, EVEC, MAXDIR, MINDIR, PT" nil)
    ("ANGLES_ULYS" pro nil (lib . "{14}/angles_ulys.pro") "%s, INIT, EVEC, VALS, DIRS, fname, unit" nil)
    ("ANGLES_ISEE" pro nil (lib . "{14}/angles_isee.pro") "%s, INIT, EVEC, VALS, DIRS, fname, unit" nil)
    ("ANGLES" pro nil (lib . "{14}/angles.pro") "%s, PHILM, INIT, EVEC, VALS, DIRS, fname, unit" nil)
    ("walenplot" pro nil (lib . "{15}/walenplot.pro") "%s, t, vh, va, e, eh, vht, tmin, tmax, ccoef0, cstd, creg, strnn" nil)
    ("waleneqs" pro nil (lib . "{15}/waleneqs.pro") "%s, t, vh, va, e, eh, vht, tmin, tmax, ccoef0, cstd, creg, strnn" nil)
    ("XTICKS" fun nil (lib . "{15}/varwaleq.pro") "Result = %s(axis, index, value)" nil)
    ("varmat" pro nil (lib . "{15}/varmat.pro") "%s, n, x, y, z, fav, m" nil)
    ("XTICKS" fun nil (lib . "{15}/vareq.pro") "Result = %s(axis, index, value)" nil)
    ("trafo" pro nil (lib . "{15}/trafo.pro") "%s, M, xin, yin, zin, xout, yout, zout" nil)
    ("timereqs" pro nil (lib . "{15}/timereqs.pro") "%s, t1min, t1max, tmin, tmax, ib, ie, ivb, ive, success, index" nil)
    ("timerange" pro nil (lib . "{15}/timerange.pro") "%s, time, tfac, tmin, tmax, it1, it2, nt, success" nil)
    ("sorteigenb" pro nil (lib . "{15}/sorteigenb.pro") "%s, e1, e2, e3" nil)
    ("sorteigen" pro nil (lib . "{15}/sorteigen.pro") "%s, e0, e1, e2, out0, out1, out2" nil)
    ("setplotvar" pro nil (lib . "{15}/setplotvar.pro") "%s, ie, ib, ive, ibe, timeb, timev, exr, eyr, ezr" nil)
    ("read2" pro nil (lib . "{15}/sat2.pro") "%s, tim" nil)
    ("readsat" pro nil (lib . "{15}/readsat.pro") "%s" nil)
    ("readold" pro nil (lib . "{15}/readold.pro") "%s" nil)
    ("readeqso2" pro nil (lib . "{15}/readeqso2.pro") "%s, day" nil)
    ("readeqso1" pro nil (lib . "{15}/readeqso1.pro") "%s, day" nil)
    ("readeqso" pro nil (lib . "{15}/readeqso.pro") "%s, day" nil)
    ("readeqs" pro nil (lib . "{15}/readeqs.pro") "%s, day" nil)
    ("readeqhr" pro nil (lib . "{15}/readeqhr.pro") "%s, day" nil)
    ("read3" pro nil (lib . "{15}/read3.pro") "%s, tim" nil)
    ("read2" pro nil (lib . "{15}/read2.pro") "%s, tim" nil)
    ("PRINTPL" pro nil (lib . "{15}/printpl.pro") "%s, nt, tmin, tmax, evv1, evv2, evv3, ewv, vav, evb1, evb2, evb3, ewb, bav, eve1, eve2, eve3, ewe, eav, eveh1, eveh2, eveh3, eweh, ehav, vht, bmsp, bmsh, vmsp, vmsh, rhotmsp, rhotmsh, ccoef0, cstd, creg, strnn" nil)
    ("PRINTEQS" pro nil (lib . "{15}/printeqs.pro") "%s, nt, tmin, tmax, evv1, evv2, evv3, ewv, vav, evb1, evb2, evb3, ewb, bav, eve1, eve2, eve3, ewe, eav, eveh1, eveh2, eveh3, eweh, ehav, vht, ccoef0, cstd, creg, strnn" nil)
    ("pltvpar" pro nil (lib . "{15}/pltvpar.pro") "%s, min, max, timeb, timev, baxr, bayr, bazr, strnn" nil)
    ("plt2var" pro nil (lib . "{15}/plt2var.pro") "%s, itot, min, max, time2d, satchoice, strnn" nil)
    ("plt1eqs" pro nil (lib . "{15}/plt1eqs.pro") "%s, min, max, timeb, timev, baxr, bayr, bazr, strnn" nil)
    ("plt0var" pro nil (lib . "{15}/plt0var.pro") "%s, itot, min, max, time2d, satchoice, strnn" nil)
    ("plt0eqs" pro nil (lib . "{15}/plt0eqs.pro") "%s, min, max, timeb, timev, baxr, bayr, bazr, strnn" nil)
    ("PLOBVEQS1" pro nil (lib . "{15}/plobveqs1.pro") "%s, nt, t, ntb, tb, tv1, tv2, b, v, e, e1, e2, e3, ew, ind, strnn, xtit, vht" nil)
    ("PLOBVEQS" pro nil (lib . "{15}/plobveqs.pro") "%s, nt, t, ntb, tb, tv1, tv2, b, v, e, e1, e2, e3, ew, ind, strnn, xtit, vht" nil)
    ("PLOBVE" pro nil (lib . "{15}/plobve.pro") "%s, nt, t, tv1, tv2, b, v, e, e1, e2, e3, ew, ind, strnn, xtit, vht" nil)
    ("matmul3" pro nil (lib . "{15}/matmul3.pro") "%s, m1, m2, mout" nil)
    ("indrange" pro nil (lib . "{15}/indrange.pro") "%s, t1min, t1max, tmin, tmax, ib, ie, ivb, ive, success, index" nil)
    ("htcoor" pro nil (lib . "{15}/htcoor.pro") "%s, n, vx, vy, vz, bx, by, bz, vht" nil)
    ("HODOEQS" pro nil (lib . "{15}/hodoeqs.pro") "%s, nt, t, tv1, tv2, itv1, itv2, f, ef1, ef2, ef3, ewf, st1, ind, strnn, pt, vht" nil)
    ("HODO" pro nil (lib . "{15}/hodo.pro") "%s, nt, t, tv1, tv2, itv1, itv2, f, ef1, ef2, ef3, ewf, st1, ind, strnn, pt, vht" nil)
    ("eigen" pro nil (lib . "{15}/eigen.pro") "%s, M, v1, v2, v3, d" nil)
    ("ehtfieldeqs" pro nil (lib . "{15}/ehtfieldeqs.pro") "%s, unitype, vht, bx, by, bz, ehx, ehy, ehz" nil)
    ("ehtfield" pro nil (lib . "{15}/ehtfield.pro") "%s, unitype, vht, bx, by, bz, ehx, ehy, ehz" nil)
    ("efieldeqs" pro nil (lib . "{15}/efieldeqs.pro") "%s, vx, vy, vz, bx, by, bz, ex, ey, ez" nil)
    ("efield" pro nil (lib . "{15}/efield.pro") "%s, unitype, vx, vy, vz, bx, by, bz, ex, ey, ez" nil)
    ("cvhms" fun nil (lib . "{15}/cvhms.pro") "Result = %s(time)" nil)
    ("aveb" pro nil (lib . "{15}/aveb.pro") "%s, ivb, ive" nil)
    ("VAR_TO_DT" fun nil (lib . "{17}/var_to_dt.pro") "Result = %s(yyyy, mm, dd, hh, min, ss)" nil)
    ("TODAY" fun nil (lib . "{17}/today.pro") "Result = %s" nil)
    ("STR_TO_DT" fun nil (lib . "{17}/str_to_dt.pro") "Result = %s(date_strings, time_strings)" (("date_fmt") ("time_fmt")))
    ("SEC_TO_DT" fun nil (lib . "{17}/sec_to_dt.pro") "Result = %s(seconds)" (("Base") ("Date_fmt")))
    ("JUL_TO_DT" fun nil (lib . "{17}/jul_to_dt.pro") "Result = %s(julian)" nil)
    ("IDLDT__DEFINE" pro nil (lib . "{17}/idldt__define.pro") "%s" nil)
    ("DTGEN" fun nil (lib . "{17}/dtgen.pro") "Result = %s(dt_var, Number)" (("Day") ("Hour") ("Minute") ("Month") ("Second") ("Year")))
    ("DT_TO_VAR" pro nil (lib . "{17}/dt_to_var.pro") "%s, dt_days" (("DAY") ("HOUR") ("MINUTE") ("MONTH") ("SECOND") ("YEAR")))
    ("DT_TO_STR" pro nil (lib . "{17}/dt_to_str.pro") "%s, dt_days, date_strs, time_strs" (("DATE_FMT") ("TIME_FMT")))
    ("DT_TO_SEC" fun nil (lib . "{17}/dt_to_sec.pro") "Result = %s(dt_days)" (("Base") ("Date_fmt")))
    ("DT_SUBTRACT" fun nil (lib . "{17}/dt_subtract.pro") "Result = %s(dt_var)" (("Compress") ("Day") ("Hour") ("Minute") ("Month") ("Second") ("Year")))
    ("DT_PLOT" pro nil (lib . "{17}/dt_plot.pro") "%s, p1, p2" (("_EXTRA") ("BOX") ("COMPRESS") ("DATE_SEPARATOR") ("DMY") ("EXCLUDE_HOLIDAY") ("MAX_LEVELS") ("MDY") ("MONTH_ABBREV") ("NUM_LEVELS") ("NUMERIC_MONTH") ("START_LEVEL") ("SUPPRESS") ("TIME_SEPARATOR") ("TWO_DIGIT_YEAR") ("WAVE_FORMAT") ("WEEK_BOUNDARY") ("XMARGIN") ("XRANGE") ("YMARGIN") ("YMD") ("YRANGE") ("YTIME")))
    ("DT_OPLOT" pro nil (lib . "{17}/dt_plot.pro") "%s, p1, p2" (("_EXTRA")))
    ("DT_PLOT_FORMAT" fun nil (lib . "{17}/dt_plot.pro") "Result = %s(axis, index, value)" nil)
    ("DT_ADD" fun nil (lib . "{17}/dt_add.pro") "Result = %s(dt_var)" (("Day") ("Hour") ("Minute") ("Month") ("Round") ("Second") ("Year")))
    ("DAY_OF_YEAR" fun nil (lib . "{17}/day_of_year.pro") "Result = %s(dt_days)" nil)
    ("DAY_OF_WEEK" fun nil (lib . "{17}/day_of_week.pro") "Result = %s(dt_days)" nil)
    ("DAY_NAME" fun nil (lib . "{17}/day_name.pro") "Result = %s(dt_days)" nil)
    ("XPDMENU" pro nil (lib . "{18}/xpdmenu.pro") "%s, DESC, PARENT" (("BASE") ("COLUMN") ("FONT") ("FRAME") ("TITLE")))
    ("mkpull_pulldown" pro nil (lib . "{18}/xpdmenu.pro") "%s, parent, unit, data, idx, n, font" nil)
    ("mkpull_getline" fun nil (lib . "{18}/xpdmenu.pro") "Result = %s(unit, data, idx, n, label, value)" nil)
    ("XMENU" pro nil (lib . "{18}/xmenu.pro") "%s, VALUES, PARENT" (("BASE") ("BUTTONS") ("COLUMN") ("EXCLUSIVE") ("FONT") ("FRAME") ("NO_RELEASE") ("NONEXCLUSIVE") ("ROW") ("SCROLL") ("SPACE") ("TITLE") ("UVALUE") ("X_SCROLL_SIZE") ("XPAD") ("Y_SCROLL_SIZE") ("YPAD")))
    ("XManagerTool" pro nil (lib . "{18}/xmanagertool.pro") "%s" (("GROUP")))
    ("XDL" pro nil (lib . "{18}/xdl.pro") "%s, name" (("group")))
    ("xdl_event" pro nil (lib . "{18}/xdl.pro") "%s, ev" nil)
    ("xdl_update" pro nil (lib . "{18}/xdl.pro") "%s, name" nil)
    ("xdl_list" fun nil (lib . "{18}/xdl.pro") "Result = %s(parent)" nil)
    ("xanimate" pro nil (lib . "{18}/xanimate.pro") "%s, rate" (("close") ("frame") ("image") ("order") ("set") ("title") ("window")))
    ("wmenu" pro nil (lib . "{18}/wmenu.pro") "%s" (("GROUP")))
    ("wmenu_event" pro nil (lib . "{18}/wmenu.pro") "%s, event" nil)
    ("Wilcoxon" pro nil (lib . "{18}/wilcoxon.pro") "%s, Data, Rank, Prob" (("List_Name") ("Missing") ("Names") ("NoPrint") ("Tail")))
    ("WidUtil" pro nil (lib . "{18}/widutil.pro") "%s" nil)
    ("GetValue" pro nil (lib . "{18}/widutil.pro") "%s, Obj, Names, NoName" nil)
    ("SetNextFocus" pro nil (lib . "{18}/widutil.pro") "%s, Binfo, Event" nil)
    ("SetFocus" pro nil (lib . "{18}/widutil.pro") "%s, Id" nil)
    ("IAddCmd" pro nil (lib . "{18}/widutil.pro") "%s, Cmd, Value, Keyword" (("FORCE")))
    ("SAddCmd" pro nil (lib . "{18}/widutil.pro") "%s, Cmd, Value, Keyword" (("FORCE")))
    ("Dirty" pro nil (lib . "{18}/widutil.pro") "%s, Parent, Thing, Call" nil)
    ("Dirty_Event" pro nil (lib . "{18}/widutil.pro") "%s, Event" nil)
    ("HasChildren" fun nil (lib . "{18}/widutil.pro") "Result = %s(Ptr)" (("NONE_OK")))
    ("UValue" fun nil (lib . "{18}/widutil.pro") "Result = %s(Obj, Ptr)" nil)
    ("GetId" fun nil (lib . "{18}/widutil.pro") "Result = %s(Ptr)" nil)
    ("VarId" fun nil (lib . "{18}/widutil.pro") "Result = %s(Ptr)" nil)
    ("NewId" fun nil (lib . "{18}/widutil.pro") "Result = %s" nil)
    ("SetTag" pro nil (lib . "{18}/widutil.pro") "%s, Ptr, Tag, Value" nil)
    ("GetType" pro nil (lib . "{18}/widutil.pro") "%s, Ptr, Type" nil)
    ("DoFList2" pro nil (lib . "{18}/widutil.pro") "%s, Ptr, ProcStr, Unit1, Unit2" nil)
    ("DoFList" pro nil (lib . "{18}/widutil.pro") "%s, Ptr, ProcStr, Unit" nil)
    ("DoList" pro nil (lib . "{18}/widutil.pro") "%s, Ptr, ProcStr" nil)
    ("ClearVar" pro nil (lib . "{18}/widutil.pro") "%s, Var" nil)
    ("Qstring" fun nil (lib . "{18}/widutil.pro") "Result = %s(String)" nil)
    ("ErrorDialog" pro nil (lib . "{18}/widutil.pro") "%s, Parent, Msg" nil)
    ("ErrorEvent" pro nil (lib . "{18}/widutil.pro") "%s, Event" nil)
    ("WidMain" pro nil (lib . "{18}/widmain.pro") "%s" nil)
    ("ShowObjTree" pro nil (lib . "{18}/widmain.pro") "%s, Ptr" nil)
    ("ShowTree" pro nil (lib . "{18}/widmain.pro") "%s, Unit, Ptr, Level" nil)
    ("MAIN_BuildAttr" pro nil (lib . "{18}/widmain.pro") "%s, Leader, Ptr, Obj" nil)
    ("MAIN_Restore" pro nil (lib . "{18}/widmain.pro") "%s, Unit, Parent, Ptr" nil)
    ("MAIN_Build" pro nil (lib . "{18}/widmain.pro") "%s, Ptr, Base" nil)
    ("MAIN_Event" pro nil (lib . "{18}/widmain.pro") "%s, Event" nil)
    ("MAIN_BarEvent" pro nil (lib . "{18}/widmain.pro") "%s, Event" nil)
    ("MAIN_Destroy" pro nil (lib . "{18}/widmain.pro") "%s, Ptr" nil)
    ("MAIN_Alloc" pro nil (lib . "{18}/widmain.pro") "%s, Parent, Ptr" nil)
    ("UpdateMainDlg" pro nil (lib . "{18}/widmain.pro") "%s" nil)
    ("WidFile" pro nil (lib . "{18}/widfile.pro") "%s" nil)
    ("TestDraw" pro nil (lib . "{18}/widfile.pro") "%s, Ptr" nil)
    ("FileGenPro" pro nil (lib . "{18}/widfile.pro") "%s, StdHdr, CheckFlag" nil)
    ("MakeBackup" pro nil (lib . "{18}/widfile.pro") "%s, File, Unit" nil)
    ("FindMagic" fun nil (lib . "{18}/widfile.pro") "Result = %s(Id, Unit, OldUnit)" nil)
    ("EndMagic" pro nil (lib . "{18}/widfile.pro") "%s, Unit, Id" nil)
    ("BeginMagic" pro nil (lib . "{18}/widfile.pro") "%s, Unit, Id" nil)
    ("SaveStr" pro nil (lib . "{18}/widfile.pro") "%s, Unit, Ptr, Obj, StrName, Default" nil)
    ("ISaveCmd" pro nil (lib . "{18}/widfile.pro") "%s, Unit, Value, Keyword" (("FORCE")))
    ("SSaveCmd" pro nil (lib . "{18}/widfile.pro") "%s, Unit, Value, Keyword" (("FORCE")))
    ("FileSave" pro nil (lib . "{18}/widfile.pro") "%s" nil)
    ("FileOpen" pro nil (lib . "{18}/widfile.pro") "%s" nil)
    ("InternalFileOpen" pro nil (lib . "{18}/widfile.pro") "%s, NewFile" nil)
    ("FileNew" pro nil (lib . "{18}/widfile.pro") "%s" nil)
    ("MISC_Restore" pro nil (lib . "{18}/widfile.pro") "%s, Unit, Parent, Ptr, Type, HasValue1" nil)
    ("GenWrite" pro nil (lib . "{18}/widfile.pro") "%s, Unit, Ptr" (("DEFAULT")))
    ("XPRINTF" pro nil (lib . "{18}/widfile.pro") "%s, Unit, a1, a2, a3, a4, a5, a6, a7" (("FORMAT") ("NO_EOL")))
    ("InternalXPrintf" fun nil (lib . "{18}/widfile.pro") "Result = %s(n, a1, a2, a3, a4, a5, a6, a7)" (("FORMAT")))
    ("InsureExt" pro nil (lib . "{18}/widfile.pro") "%s, File, Ending" nil)
    ("ExtractSimpleName" fun nil (lib . "{18}/widfile.pro") "Result = %s(File)" (("START")))
    ("CurrPath" fun nil (lib . "{18}/widfile.pro") "Result = %s" nil)
    ("WidEdit" pro nil (lib . "{18}/widedit.pro") "%s" nil)
    ("KillEdit" pro nil (lib . "{18}/widedit.pro") "%s, Id" nil)
    ("PasteChild" pro nil (lib . "{18}/widedit.pro") "%s" nil)
    ("PasteChildEvent" pro nil (lib . "{18}/widedit.pro") "%s, Event" nil)
    ("EditChild" pro nil (lib . "{18}/widedit.pro") "%s" nil)
    ("CutChild" pro nil (lib . "{18}/widedit.pro") "%s" (("COPY")))
    ("CutEvent" pro nil (lib . "{18}/widedit.pro") "%s, Event" nil)
    ("RemoveDialogs" pro nil (lib . "{18}/widedit.pro") "%s, Ptr" nil)
    ("MakeLists" pro nil (lib . "{18}/widedit.pro") "%s, ParPtr, List, Strs" nil)
    ("UpdateEdit" pro nil (lib . "{18}/widedit.pro") "%s, Removed" nil)
    ("UpdateCut" pro nil (lib . "{18}/widedit.pro") "%s, Id, Removed" nil)
    ("WidEd" pro nil (lib . "{18}/wided.pro") "%s, File" nil)
    ("Generate" pro nil (lib . "{18}/wided.pro") "%s" nil)
    ("Gen_event" pro nil (lib . "{18}/wided.pro") "%s, Event" nil)
    ("Init" pro nil (lib . "{18}/wided.pro") "%s" (("COMPILE_ONLY")))
    ("VarName" fun nil (lib . "{18}/wided.pro") "Result = %s(Ptr)" nil)
    ("NextPtr" fun nil (lib . "{18}/wided.pro") "Result = %s(Ptr)" nil)
    ("wided_common" pro nil (lib . "{18}/wided.pro") "%s" nil)
    ("WidDep" pro nil (lib . "{18}/widdep.pro") "%s" nil)
    ("DEP_GenWid" pro nil (lib . "{18}/widdep.pro") "%s, Unit, Ptr, Leader" nil)
    ("GetDrawables" pro nil (lib . "{18}/widdep.pro") "%s, Unit, Ptr" nil)
    ("DEP_BaseEv" pro nil (lib . "{18}/widdep.pro") "%s, Unit, OldUnit, Ptr" nil)
    ("SaveEvent" pro nil (lib . "{18}/widdep.pro") "%s, Unit, Ptr" nil)
    ("DEP_Generate" pro nil (lib . "{18}/widdep.pro") "%s, Ptr, Id, Offset" nil)
    ("TestDraw" pro nil (lib . "{18}/widdep.pro") "%s, Ptr" nil)
    ("DEP_BuildAttr" pro nil (lib . "{18}/widdep.pro") "%s, Leader, Ptr, Obj" nil)
    ("DEP_Restore" pro nil (lib . "{18}/widdep.pro") "%s, Unit, Parent, Ptr" nil)
    ("DEP_Save" pro nil (lib . "{18}/widdep.pro") "%s, Unit, Ptr" nil)
    ("DEP_Build" pro nil (lib . "{18}/widdep.pro") "%s, Ptr, Base" nil)
    ("DEP_Event" pro nil (lib . "{18}/widdep.pro") "%s, Event" nil)
    ("DEP_BarEvent" pro nil (lib . "{18}/widdep.pro") "%s, Event" nil)
    ("DEP_Kill" pro nil (lib . "{18}/widdep.pro") "%s, Dlg" nil)
    ("DEP_Destroy" pro nil (lib . "{18}/widdep.pro") "%s, Ptr" nil)
    ("DEP_Copy" pro nil (lib . "{18}/widdep.pro") "%s, Ptr, Copy" nil)
    ("DEP_Alloc" pro nil (lib . "{18}/widdep.pro") "%s, Parent, Ptr" nil)
    ("WidBuild" pro nil (lib . "{18}/widbuild.pro") "%s" nil)
    ("MISC_Event" pro nil (lib . "{18}/widbuild.pro") "%s, Event, FontIdx" nil)
    ("MISC_Kill" pro nil (lib . "{18}/widbuild.pro") "%s, Dlg" nil)
    ("DoXFont" pro nil (lib . "{18}/widbuild.pro") "%s, Obj, Id" nil)
    ("BuildEdit" pro nil (lib . "{18}/widbuild.pro") "%s, Base, Obj, Edit" (("SINGLE")))
    ("BuildOther" pro nil (lib . "{18}/widbuild.pro") "%s, Base, Obj, Foci, FOff" (("FRAME")))
    ("BuildOkCancel" pro nil (lib . "{18}/widbuild.pro") "%s, Base, Obj" nil)
    ("BuildXY" pro nil (lib . "{18}/widbuild.pro") "%s, Base, Obj, Foci, FOff" (("ALL") ("OFFSET") ("SCROLL") ("SIZE")))
    ("BuildBaseType" pro nil (lib . "{18}/widbuild.pro") "%s, Base, Obj, Foci, FOff, RowColId, Btns" (("ROW")))
    ("Field" fun nil (lib . "{18}/widbuild.pro") "Result = %s(Base, Title, Value, Uvalue)" (("FLOAT") ("INT") ("LONG") ("SIZE") ("STRING")))
    ("BuildToolBar" pro nil (lib . "{18}/widbuild.pro") "%s, Base, ToolBase" nil)
    ("ToolBar_Event" pro nil (lib . "{18}/widbuild.pro") "%s, Event" nil)
    ("MakeAddMenu" fun nil (lib . "{18}/widbuild.pro") "Result = %s" nil)
    ("MakeBaseObj" pro nil (lib . "{18}/widbuild.pro") "%s, Parent, Obj, Type" nil)
    ("WidAlloc" pro nil (lib . "{18}/widalloc.pro") "%s" nil)
    ("Accept" pro nil (lib . "{18}/widalloc.pro") "%s, Obj, Ptr" nil)
    ("Cancel" pro nil (lib . "{18}/widalloc.pro") "%s, Obj, Ptr" nil)
    ("AddChild" pro nil (lib . "{18}/widalloc.pro") "%s, Parent, Child" (("NO_CANCEL") ("NO_UPDATE")))
    ("NextPtr" fun nil (lib . "{18}/widalloc.pro") "Result = %s(Ptr)" nil)
    ("Obj2Ptr" pro nil (lib . "{18}/widalloc.pro") "%s, Obj, Ptr" (("COPY")))
    ("Ptr2Obj" pro nil (lib . "{18}/widalloc.pro") "%s, Ptr, Obj" (("COPY")))
    ("GenCopy" pro nil (lib . "{18}/widalloc.pro") "%s, Ptr, Copy" (("HASVALUE")))
    ("GenDestroy" pro nil (lib . "{18}/widalloc.pro") "%s, Ptr" (("HASVALUE")))
    ("Destroy" pro nil (lib . "{18}/widalloc.pro") "%s, Ptr" nil)
    ("VMSCODE" fun nil (lib . "{18}/vmscode.pro") "Result = %s(CODE)" (("FROM_V1VMS")))
    ("TPLT_Alloc" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Parent, Ptr" nil)
    ("TPLT_GenWid" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("TPLT_Generate" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Base, Ptr" nil)
    ("TPLT_Restore" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("TPLT_Save" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Unit, Ptr" nil)
    ("TPLT_Build" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("TPLT_Event" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Event" nil)
    ("TPLT_Destroy" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Ptr" nil)
    ("TPLT_Copy" pro nil (lib . "{18}/tplt_alloc.pro") "%s, Ptr, Copy" nil)
    ("TPLT_Icon" fun nil (lib . "{18}/tplt_alloc.pro") "Result = %s" nil)
    ("tiff_write" pro nil (lib . "{18}/tiff_write.pro") "%s, filename, array, orientation" (("Blue") ("Green") ("Long") ("PlanarConfig") ("Red") ("Short") ("Xresol") ("Yresol")))
    ("tiff_add_tag" pro nil (lib . "{18}/tiff_write.pro") "%s, lun, tag, value" nil)
    ("tiff_read" fun nil (lib . "{18}/tiff_read.pro") "Result = %s(file, r, g, b)" (("order") ("PlanarConfig") ("UNSIGNED")))
    ("tiff_read_field" fun nil (lib . "{18}/tiff_read.pro") "Result = %s(index, tag, lun)" nil)
    ("tiff_byte" fun nil (lib . "{18}/tiff_read.pro") "Result = %s(a, i)" (("len")))
    ("tiff_int" fun nil (lib . "{18}/tiff_read.pro") "Result = %s(a, i)" (("len")))
    ("tiff_rational" fun nil (lib . "{18}/tiff_read.pro") "Result = %s(a, i)" (("len")))
    ("tiff_long" fun nil (lib . "{18}/tiff_read.pro") "Result = %s(a, i)" (("len")))
    ("tiff_dump" pro nil (lib . "{18}/tiff_dump.pro") "%s, file" nil)
    ("tiff_dump_field" pro nil (lib . "{18}/tiff_dump.pro") "%s, index, lun" nil)
    ("tiff_basic" pro nil (lib . "{18}/tiff_dump.pro") "%s" nil)
    ("tiff_byte" fun nil (lib . "{18}/tiff_dump.pro") "Result = %s(a, i)" (("len")))
    ("tiff_int" fun nil (lib . "{18}/tiff_dump.pro") "Result = %s(a, i)" (("len")))
    ("tiff_rational" fun nil (lib . "{18}/tiff_dump.pro") "Result = %s(a, i)" (("len")))
    ("tiff_long" fun nil (lib . "{18}/tiff_dump.pro") "Result = %s(a, i)" (("len")))
    ("TEXT_Alloc" pro nil (lib . "{18}/text_alloc.pro") "%s, Parent, Ptr" nil)
    ("TEXT_GenWid" pro nil (lib . "{18}/text_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("TEXT_Generate" pro nil (lib . "{18}/text_alloc.pro") "%s, Base, Ptr" nil)
    ("TEXT_Restore" pro nil (lib . "{18}/text_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("TEXT_Save" pro nil (lib . "{18}/text_alloc.pro") "%s, Unit, Ptr" nil)
    ("TEXT_Build" pro nil (lib . "{18}/text_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("TEXT_Event" pro nil (lib . "{18}/text_alloc.pro") "%s, Event" nil)
    ("TEXT_Destroy" pro nil (lib . "{18}/text_alloc.pro") "%s, Ptr" nil)
    ("TEXT_Copy" pro nil (lib . "{18}/text_alloc.pro") "%s, Ptr, Copy" nil)
    ("TEXT_Icon" fun nil (lib . "{18}/text_alloc.pro") "Result = %s" nil)
    ("testcontrast" fun nil (lib . "{18}/testcontrast.pro") "Result = %s(A, unit)" nil)
    ("SURFACE_FIT" fun nil (lib . "{18}/surface_fit.pro") "Result = %s(surface, degree)" nil)
    ("studrange" fun nil (lib . "{18}/studrange.pro") "Result = %s(P, V, R)" nil)
    ("QTRNGO" fun nil (lib . "{18}/studrange.pro") "Result = %s(P, V, R, IFault)" nil)
    ("student1_range" fun nil (lib . "{18}/studrange.pro") "Result = %s(Q, V, R, Ifault)" nil)
    ("student_t" fun nil (lib . "{18}/student_t.pro") "Result = %s(a1, DF)" nil)
    ("student1_t" fun nil (lib . "{18}/student1_t.pro") "Result = %s(X, DF)" nil)
    ("stepwise" pro nil (lib . "{18}/stepwise.pro") "%s, X1, Y1, InEQ, alpha, alphar" (("List_Name") ("Missing") ("Report") ("VarNames")))
    ("f_to_enter" fun nil (lib . "{18}/stepwise.pro") "Result = %s(X, index, COR, k, n, SC)" nil)
    ("f_to_exit" fun nil (lib . "{18}/stepwise.pro") "Result = %s(C, index, COR, k, n)" nil)
    ("remove1_from" fun nil (lib . "{18}/stepwise.pro") "Result = %s(A, B)" nil)
    ("remove_from" fun nil (lib . "{18}/stepwise.pro") "Result = %s(A, B, VarNo)" nil)
    ("UpDate" pro nil (lib . "{18}/stepwise.pro") "%s, COR, INEQ, N, K" nil)
    ("InsertVar" pro nil (lib . "{18}/stepwise.pro") "%s, A, index, k" nil)
    ("mult_cor" fun nil (lib . "{18}/stepwise.pro") "Result = %s(A, index, k)" nil)
    ("setnames" fun nil (lib . "{18}/stepwise.pro") "Result = %s(vn, N, unit)" nil)
    ("writereport" pro nil (lib . "{18}/stepwise.pro") "%s, X, Y, V, Enter, direction, RepType, unit" nil)
    ("STDEV" fun nil (lib . "{18}/stdev.pro") "Result = %s(Array, Mean)" nil)
    ("spearman" pro nil (lib . "{18}/spearman.pro") "%s, Data1, CorMatrix" (("List_Name") ("Missing") ("Names") ("NoPrint")))
    ("compute_ave" pro nil (lib . "{18}/spearman.pro") "%s, Data, SortT, R, count" nil)
    ("SLIDER_Alloc" pro nil (lib . "{18}/slider_alloc.pro") "%s, Parent, Ptr" nil)
    ("SLIDER_GenWid" pro nil (lib . "{18}/slider_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("SLIDER_Generate" pro nil (lib . "{18}/slider_alloc.pro") "%s, Base, Ptr" nil)
    ("SLIDER_Restore" pro nil (lib . "{18}/slider_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("SLIDER_Save" pro nil (lib . "{18}/slider_alloc.pro") "%s, Unit, Ptr" nil)
    ("SLIDER_Build" pro nil (lib . "{18}/slider_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("SLIDER_Event" pro nil (lib . "{18}/slider_alloc.pro") "%s, Event" nil)
    ("SLIDER_Destroy" pro nil (lib . "{18}/slider_alloc.pro") "%s, Ptr" nil)
    ("SLIDER_Copy" pro nil (lib . "{18}/slider_alloc.pro") "%s, Ptr, Copy" nil)
    ("SLIDER_Icon" fun nil (lib . "{18}/slider_alloc.pro") "Result = %s" nil)
    ("slicer" pro nil (lib . "{18}/slicer.pro") "%s" (("CMD_FILE") ("COMMANDS") ("DETACHED") ("GROUP") ("MODAL") ("NO_BLOCK") ("RANGE") ("RESOLUTION")))
    ("slicer_event" pro nil (lib . "{18}/slicer.pro") "%s, ev" nil)
    ("mark_cube" pro nil (lib . "{18}/slicer.pro") "%s, ev" nil)
    ("mark_cube1" pro nil (lib . "{18}/slicer.pro") "%s, p0, ip" nil)
    ("do_cube" pro nil (lib . "{18}/slicer.pro") "%s" nil)
    ("mark_slice" pro nil (lib . "{18}/slicer.pro") "%s, ev" nil)
    ("mark_oblique" pro nil (lib . "{18}/slicer.pro") "%s, color" nil)
    ("draw_orientation" pro nil (lib . "{18}/slicer.pro") "%s" nil)
    ("slicer_show" pro nil (lib . "{18}/slicer.pro") "%s, image" nil)
    ("slicer_plane_int" fun nil (lib . "{18}/slicer.pro") "Result = %s(dummy)" nil)
    ("slicer_erase" pro nil (lib . "{18}/slicer.pro") "%s" nil)
    ("draw_cube" pro nil (lib . "{18}/slicer.pro") "%s, c0, c1, faces, color" nil)
    ("DO_ISOSURFACE" pro nil (lib . "{18}/slicer.pro") "%s" nil)
    ("slicer_colors" pro nil (lib . "{18}/slicer.pro") "%s, table" nil)
    ("slicer_draw" pro nil (lib . "{18}/slicer.pro") "%s, ax, slice" nil)
    ("slicer_oblique" pro nil (lib . "{18}/slicer.pro") "%s" nil)
    ("slicer_orientation" pro nil (lib . "{18}/slicer.pro") "%s, i" nil)
    ("SLICER_UNDO" pro nil (lib . "{18}/slicer.pro") "%s" nil)
    ("SLICER_JOURNAL" pro nil (lib . "{18}/slicer.pro") "%s, name, params" nil)
    ("SLICER_PLAYBACK" pro nil (lib . "{18}/slicer.pro") "%s, Commands" (("FILE")))
    ("slicer_plane_int" fun nil (lib . "{18}/slicer.pro") "Result = %s(dummy)" nil)
    ("p_inverse" fun nil (lib . "{18}/slicer.pro") "Result = %s(x, y, z)" nil)
    ("p_inside_poly" fun nil (lib . "{18}/slicer.pro") "Result = %s(polyv, p)" nil)
    ("simpson" fun nil (lib . "{18}/simpson.pro") "Result = %s(funct, a, b, count)" (("complex") ("plot_it") ("tol")))
    ("simprec1" fun nil (lib . "{18}/simpson.pro") "Result = %s(funct, a, b, y, level, tol, count, S0, p, complex)" nil)
    ("simprec1" fun nil (lib . "{18}/simpson.pro") "Result = %s(funct, a, b, y, level, tol, count, S0, p, complex)" nil)
    ("simpregress" fun nil (lib . "{18}/simpregress.pro") "Result = %s(X, Y, W, YFit, A0, sigma, FTest, R, RMul, Chisqr)" nil)
    ("sign_test" pro nil (lib . "{18}/sign_test.pro") "%s, Data, Diff, Prob" (("List_Name") ("Missing") ("Names") ("NoPrint")))
    ("gaussint1" fun nil (lib . "{18}/sign_test.pro") "Result = %s(x)" nil)
    ("SIGMA" fun nil (lib . "{18}/sigma.pro") "Result = %s(ARRAY, N_PAR, DIMENSION)" nil)
    ("set_xy" pro nil (lib . "{18}/set_xy.pro") "%s, xmin, xmax, ymin, ymax" nil)
    ("set_viewport" pro nil (lib . "{18}/set_viewport.pro") "%s, xmin, xmax, ymin, ymax" nil)
    ("set_screen" pro nil (lib . "{18}/set_screen.pro") "%s, xmin, xmax, ymin, ymax" nil)
    ("SET_NATIVE_PLOT" pro nil (lib . "{18}/set_native_plot.pro") "%s" nil)
    ("runs_test" pro nil (lib . "{18}/runs_test.pro") "%s, Sequence1, RunNo, Prob, BinNo, Z" (("List_Name")))
    ("rsi_gammai" fun nil (lib . "{18}/rsi_gammai.pro") "Result = %s(a, x)" nil)
    ("g_fract" pro nil (lib . "{18}/rsi_gammai.pro") "%s, result, x, a" nil)
    ("g_series" pro nil (lib . "{18}/rsi_gammai.pro") "%s, result, x, a" nil)
    ("ROT_INT" fun nil (lib . "{18}/rot_int.pro") "Result = %s(A, ANGLE, MAG, X0, Y0)" (("CUBIC")))
    ("RMF" pro nil (lib . "{18}/rmf.pro") "%s, unit, A, rows, columns" (("complex") ("double") ("format")))
    ("RM" pro nil (lib . "{18}/rm.pro") "%s, A, rows, columns" (("complex") ("double")))
    ("rgb_to_hsv" pro nil (lib . "{18}/rgb_to_hsv.pro") "%s, red, green, blue, h, s, v" nil)
    ("regression" pro nil (lib . "{18}/regression.pro") "%s, X1, Y1, W1, A0, COEFF, Resid, YFit, sigma, FTest, R, RMul, ChiSqr" (("ListName") ("Missing") ("NoPrint") ("Unit") ("VarNames")))
    ("printoutr" pro nil (lib . "{18}/regression.pro") "%s, TName, BName, SST, SSE, R, C, unit" nil)
    ("REGRESS1" fun nil (lib . "{18}/regress1.pro") "Result = %s(X, Y, W, YFIT, A0, SIGMA, FTEST, R, RMUL, CHISQ)" nil)
    ("PWIDGET" pro nil (lib . "{18}/pwidget.pro") "%s, x, y" (("GROUP") ("RESTORE") ("SAVE") ("WINDOW_SIZE")))
    ("pwidget_events" pro nil (lib . "{18}/pwidget.pro") "%s, ev" nil)
    ("zoom_drag" pro nil (lib . "{18}/pwidget.pro") "%s, release, x, y" nil)
    ("charsize_but" fun nil (lib . "{18}/pwidget.pro") "Result = %s(base, width, e_string)" (("SET_INDEX")))
    ("b_button" fun nil (lib . "{18}/pwidget.pro") "Result = %s(a)" nil)
    ("CW_COLOR_INDEXE" fun nil (lib . "{18}/pwidget.pro") "Result = %s(ev)" nil)
    ("CW_COLOR_INDEXS" pro nil (lib . "{18}/pwidget.pro") "%s, id, value" nil)
    ("CW_COLOR_INDEXG" fun nil (lib . "{18}/pwidget.pro") "Result = %s(id)" nil)
    ("CW_COLOR_INDEX" fun nil (lib . "{18}/pwidget.pro") "Result = %s(parent)" (("FRAME") ("LABEL") ("NCOLORS") ("START_COLOR") ("UVALUE") ("XSIZE") ("YSIZE")))
    ("CW_AXIS_WIDGETE" fun nil (lib . "{18}/pwidget.pro") "Result = %s(ev)" nil)
    ("pw_set" pro nil (lib . "{18}/pwidget.pro") "%s, id, uval, s" nil)
    ("get_numeric_widget" fun nil (lib . "{18}/pwidget.pro") "Result = %s(str, id)" (("FLOAT") ("MAXV") ("MINV")))
    ("CW_AXIS_WIDGET" fun nil (lib . "{18}/pwidget.pro") "Result = %s(parent)" (("FRAME") ("LABEL") ("name") ("UVALUE")))
    ("CW_AXIS_WIDGETG" fun nil (lib . "{18}/pwidget.pro") "Result = %s(id)" nil)
    ("row_buttons" fun nil (lib . "{18}/pwidget.pro") "Result = %s(base, label, choices, uvalues)" (("EXCLUSIVE") ("NO_RELEASE") ("NONEXCLUSIVE") ("SET_BUTTON")))
    ("pw_set_line" pro nil (lib . "{18}/pwidget.pro") "%s" (("name") ("new")))
    ("pw_redraw" pro nil (lib . "{18}/pwidget.pro") "%s" nil)
    ("list_draw" pro nil (lib . "{18}/pwidget.pro") "%s, i0, i1" (("ERASE")))
    ("PROMPT" pro nil (lib . "{18}/prompt.pro") "%s, String" nil)
    ("polycontour" pro nil (lib . "{18}/polycontour.pro") "%s, filename" (("color_index") ("DELETE_FILE") ("pattern")))
    ("PMF" pro nil (lib . "{18}/pmf.pro") "%s, unit, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20" (("format") ("title")))
    ("pmf_trans" fun nil (lib . "{18}/pmf.pro") "Result = %s(v)" nil)
    ("PM" pro nil (lib . "{18}/pm.pro") "%s, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20" (("format") ("title")))
    ("pm_trans" fun nil (lib . "{18}/pm.pro") "Result = %s(v)" nil)
    ("Pickfile" fun nil (lib . "{18}/pickfile.pro") "Result = %s" (("FILE") ("Filter") ("Fix_filter") ("GET_PATH") ("Group") ("Must_exist") ("Noconfirm") ("Path") ("Read") ("Title") ("Write")))
    ("phaser" pro nil (lib . "{18}/phaser.pro") "%s" (("landscape") ("legal") ("letter") ("portrait")))
    ("PDMENU_Alloc" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Parent, Ptr" (("N_ITEMS")))
    ("PDMENU_MenuEv" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Unit, OldUnit, Ptr" nil)
    ("SavePDCase" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Unit, Item, Parent" nil)
    ("PDMENU_GenWid" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("PDMENU_Generate" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Base, Ptr" nil)
    ("PDMENU_Restore" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("PDMENU_Save" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Unit, Ptr" nil)
    ("PDMENU_MakeDesc" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Obj, MenuDesc, Idx" nil)
    ("PDMENU_Build" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("SUBMENU_Build" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, ParPtr, ParObj, SubIdx" nil)
    ("PDMENU_Event" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Event" nil)
    ("PDMENU_MakeStrVal" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Obj, Val" nil)
    ("PDMENU_Destroy" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Ptr" (("LEAVE_DIALOGS")))
    ("PDMENU_Copy" pro nil (lib . "{18}/pdmenu_alloc.pro") "%s, Ptr, Copy" nil)
    ("PDMENU_Icon" fun nil (lib . "{18}/pdmenu_alloc.pro") "Result = %s" nil)
    ("PDE_ADI" pro nil (lib . "{18}/pde_adi.pro") "%s" nil)
    ("INITIAL_COND" fun nil (lib . "{18}/pde_adi.pro") "Result = %s(x, y)" nil)
    ("NONHOMOGENEOUS" fun nil (lib . "{18}/pde_adi.pro") "Result = %s(x, y, t)" nil)
    ("BOUNDARY_TOP" fun nil (lib . "{18}/pde_adi.pro") "Result = %s(x, t)" nil)
    ("BOUNDARY_BOT" fun nil (lib . "{18}/pde_adi.pro") "Result = %s(x, t)" nil)
    ("BOUNDARY_RT" fun nil (lib . "{18}/pde_adi.pro") "Result = %s(y, t)" nil)
    ("BOUNDARY_LT" fun nil (lib . "{18}/pde_adi.pro") "Result = %s(y, t)" nil)
    ("pd_bisection" fun nil (lib . "{18}/pd_bisection.pro") "Result = %s(a, funct, U, L, del)" nil)
    ("partial_cor" fun nil (lib . "{18}/partial_cor.pro") "Result = %s(X, Y, C)" nil)
    ("partial2_cor" fun nil (lib . "{18}/partial2_cor.pro") "Result = %s(X, Y, C)" nil)
    ("palette" pro nil (lib . "{18}/palette.pro") "%s" nil)
    ("update_bar" pro nil (lib . "{18}/palette.pro") "%s, i, v" nil)
    ("palette_back" pro nil (lib . "{18}/palette.pro") "%s" nil)
    ("draw_bar" pro nil (lib . "{18}/palette.pro") "%s, bar" nil)
    ("Pairwise" pro nil (lib . "{18}/pairwise.pro") "%s, X, Missing, YR, YC, NotGood1, good" nil)
    ("only_8bit" pro nil (lib . "{18}/only_8bit.pro") "%s" (("colors") ("mask")))
    ("NR_WTN" fun nil (lib . "{18}/nr_wtn.pro") "Result = %s(a, coef)" (("DOUBLE") ("INVERSE") ("OVERWRITE")))
    ("NR_SVD" pro nil (lib . "{18}/nr_svd.pro") "%s, a, w, u, v" (("DOUBLE")))
    ("NR_SVBKSB" fun nil (lib . "{18}/nr_svbksb.pro") "Result = %s(u, w, v, b)" (("DOUBLE")))
    ("NR_SPRSIN" fun nil (lib . "{18}/nr_sprsin.pro") "Result = %s(a)" (("DOUBLE") ("THRESH")))
    ("NR_MPROVE" fun nil (lib . "{18}/nr_mprove.pro") "Result = %s(a, alud, index, b, x)" (("DOUBLE")))
    ("NR_LUDCMP" pro nil (lib . "{18}/nr_ludcmp.pro") "%s, a, index" (("DOUBLE") ("INTERCHANGES")))
    ("NR_LUBKSB" fun nil (lib . "{18}/nr_lubksb.pro") "Result = %s(a, index, b)" (("DOUBLE")))
    ("NR_HQR" fun nil (lib . "{18}/nr_hqr.pro") "Result = %s(a)" (("DOUBLE")))
    ("NR_ELMHES" fun nil (lib . "{18}/nr_elmhes.pro") "Result = %s(a)" (("DOUBLE") ("NO_BALANCE")))
    ("multicompare" pro nil (lib . "{18}/multicompare.pro") "%s, X, Contrast, a, ST" (("Block") ("Bonferroni") ("Interactions_Two_Way") ("LSD") ("Missing") ("One_Way") ("Scheffe") ("TInteraction") ("Tukey") ("Two_Way") ("Unequal_One_Way")))
    ("testmeans" fun nil (lib . "{18}/multicompare.pro") "Result = %s(A)" nil)
    ("MP_WIDGETS" pro nil (lib . "{18}/mp_widgets.pro") "%s, request" (("NO_BLOCK")))
    ("MPW_TM" fun nil (lib . "{18}/mp_widgets.pro") "Result = %s(KEY, TOPIC_ARRAY)" nil)
    ("mpw_event" pro nil (lib . "{18}/mp_widgets.pro") "%s, ev" nil)
    ("mpw_set_lv2" pro nil (lib . "{18}/mp_widgets.pro") "%s, index" nil)
    ("mpw_update_display" pro nil (lib . "{18}/mp_widgets.pro") "%s, lv2_topics" nil)
    ("mpw_set_lv1" fun nil (lib . "{18}/mp_widgets.pro") "Result = %s(topic_idx, lv2_topics)" nil)
    ("MP_BASIC" pro nil (lib . "{18}/mp_basic.pro") "%s, REQUEST" nil)
    ("MPB_TM" fun nil (lib . "{18}/mp_basic.pro") "Result = %s(KEY, TOPIC_ARRAY, FOUND, OUTUNIT)" nil)
    ("MPB_SELTOPIC" fun nil (lib . "{18}/mp_basic.pro") "Result = %s(SUBJECT, TOPIC_ARRAY, INITIAL)" nil)
    ("movie" pro nil (lib . "{18}/movie.pro") "%s, images, rate" (("order")))
    ("MK_LIBRARY_HELP" pro nil (lib . "{18}/mk_library_help.pro") "%s, source, outfile" (("title") ("verbose")))
    ("MLH_GEN_FILE" pro nil (lib . "{18}/mk_library_help.pro") "%s, num, id_chars, idx_file, txt_file, outfile, verbose, title" nil)
    ("mlh_grab_header" pro nil (lib . "{18}/mk_library_help.pro") "%s, in_file, num, id_chars, subject, idx_file, txt_file, verbose" nil)
    ("MIPSEB_DBLFIXUP" pro nil (lib . "{18}/mipseb_dblfixup.pro") "%s, VAR" nil)
    ("menus" fun nil (lib . "{18}/menus.pro") "Result = %s(fcn, choices, help_str)" nil)
    ("mann_whitney" pro nil (lib . "{18}/mann_whitney.pro") "%s, Pop, U0, U1, n1, n2, Z, Prob" (("Missing")))
    ("compute_rank" fun nil (lib . "{18}/mann_whitney.pro") "Result = %s(x, SortD)" nil)
    ("MAN_PROC" pro nil (lib . "{18}/man_proc.pro") "%s, REQUEST" nil)
    ("maketree" pro nil (lib . "{18}/maketree.pro") "%s, pos, Imin, Sim, unit" (("CaseName") ("Width")))
    ("RemoveV" pro nil (lib . "{18}/maketree.pro") "%s, V" nil)
    ("PutV" pro nil (lib . "{18}/maketree.pro") "%s, X, V" nil)
    ("Adjust" pro nil (lib . "{18}/maketree.pro") "%s, sim, imin, N" nil)
    ("LN03" pro nil (lib . "{18}/ln03.pro") "%s, Filename, To_terminal" nil)
    ("ListWise" fun nil (lib . "{18}/listwise.pro") "Result = %s(Data, MV, RowNum, Rows, here)" nil)
    ("ListRep" pro nil (lib . "{18}/listrep.pro") "%s, X, RowNum, Rows, here" nil)
    ("LIST_Alloc" pro nil (lib . "{18}/list_alloc.pro") "%s, Parent, Ptr" nil)
    ("LIST_GenWid" pro nil (lib . "{18}/list_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("LIST_Generate" pro nil (lib . "{18}/list_alloc.pro") "%s, Base, Ptr" nil)
    ("LIST_Restore" pro nil (lib . "{18}/list_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("LIST_Save" pro nil (lib . "{18}/list_alloc.pro") "%s, Unit, Ptr" nil)
    ("LIST_Build" pro nil (lib . "{18}/list_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("LIST_Event" pro nil (lib . "{18}/list_alloc.pro") "%s, Event" nil)
    ("LIST_Destroy" pro nil (lib . "{18}/list_alloc.pro") "%s, Ptr" nil)
    ("LIST_Copy" pro nil (lib . "{18}/list_alloc.pro") "%s, Ptr, Copy" nil)
    ("LIST_Icon" fun nil (lib . "{18}/list_alloc.pro") "Result = %s" nil)
    ("lego" pro nil (lib . "{18}/lego.pro") "%s, data, xa, ya" (("ax") ("az") ("background") ("barspace") ("charsize") ("charthick") ("color") ("delta") ("font") ("outline") ("shades") ("subtitle") ("ticklen") ("title") ("xcharsize") ("xmargin") ("xminor") ("xrange") ("xstyle") ("xtickname") ("xticks") ("xtickv") ("xtitle") ("ycharsize") ("ymargin") ("yminor") ("yrange") ("ystyle") ("ytickname") ("yticks") ("ytickv") ("ytitle") ("zcharsize") ("zminor") ("zrange") ("zstyle") ("ztickname") ("zticks") ("ztickv") ("ztitle")))
    ("LatLon" pro nil (lib . "{18}/latlon.pro") "%s" nil)
    ("LABEL_Alloc" pro nil (lib . "{18}/label_alloc.pro") "%s, Parent, Ptr" nil)
    ("LABEL_GenWid" pro nil (lib . "{18}/label_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("LABEL_Generate" pro nil (lib . "{18}/label_alloc.pro") "%s, Base, Ptr" nil)
    ("LABEL_Restore" pro nil (lib . "{18}/label_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("LABEL_Save" pro nil (lib . "{18}/label_alloc.pro") "%s, Unit, Ptr" nil)
    ("LABEL_Build" pro nil (lib . "{18}/label_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("LABEL_Event" pro nil (lib . "{18}/label_alloc.pro") "%s, Event" nil)
    ("LABEL_Destroy" pro nil (lib . "{18}/label_alloc.pro") "%s, Ptr" nil)
    ("LABEL_Copy" pro nil (lib . "{18}/label_alloc.pro") "%s, Ptr, Copy" nil)
    ("LABEL_Icon" fun nil (lib . "{18}/label_alloc.pro") "Result = %s" nil)
    ("kruskal_wallis" pro nil (lib . "{18}/kruskal_wallis.pro") "%s, Data, Rank, H, Prob, df, Pop" (("List_Name") ("Missing") ("names") ("NoPrint")))
    ("kmeans" pro nil (lib . "{18}/kmeans.pro") "%s, Data1, CLuster" (("CaseName") ("ClustMeans") ("ClustSTD") ("Iter") ("List_Name") ("Missing") ("NoPrint") ("Norm") ("Number") ("SSBetween") ("SSWithin") ("VarName")))
    ("KMeans1" pro nil (lib . "{18}/kmeans.pro") "%s, Data, Clus, iter, K" nil)
    ("OutPut1" pro nil (lib . "{18}/kmeans.pro") "%s, Clus, Data, CaseNam, VarNam, unit, SD1, SB1, SW1" nil)
    ("VAnova" pro nil (lib . "{18}/kmeans.pro") "%s, Data, Cluster, VarNames, SS, unit, N, CN, R, SizeB, B1, SW1" nil)
    ("StatComp" pro nil (lib . "{18}/kmeans.pro") "%s, D, V, N, Mx, Mn, STD, SS" nil)
    ("Normal1" fun nil (lib . "{18}/kmeans.pro") "Result = %s(Data, R, C)" nil)
    ("Join" pro nil (lib . "{18}/join.pro") "%s, DataArray, pos, Imin, Sim" (("Amal") ("CaseName") ("Distance") ("List_Name") ("Missing") ("NoPrint") ("Norm") ("Pair") ("Width")))
    ("AmalDist" fun nil (lib . "{18}/join.pro") "Result = %s(I1, J1, R, pos, Am, cl, here)" nil)
    ("SetVal" pro nil (lib . "{18}/join.pro") "%s, V, I, R" nil)
    ("MinDist" pro nil (lib . "{18}/join.pro") "%s, R, DMin, IMin, I" nil)
    ("FindRow" fun nil (lib . "{18}/join.pro") "Result = %s(I, R)" nil)
    ("Normal1" fun nil (lib . "{18}/join.pro") "Result = %s(Data, R, C)" nil)
    ("Distance1" fun nil (lib . "{18}/join.pro") "Result = %s(Case1, RCases, N)" nil)
    ("EuclidRule" fun nil (lib . "{18}/join.pro") "Result = %s(Case1, RCases)" nil)
    ("hsv_to_rgb" pro nil (lib . "{18}/hsv_to_rgb.pro") "%s, h, s, v, red, green, blue" nil)
    ("hist_equal_int" pro nil (lib . "{18}/hist_equal_int.pro") "%s, image" nil)
    ("hist_equal_ct" pro nil (lib . "{18}/hist_equal_ct.pro") "%s, image" nil)
    ("HELPSY" pro nil (lib . "{18}/helpsy.pro") "%s" nil)
    ("HELPFILES" pro nil (lib . "{18}/helpfiles.pro") "%s" nil)
    ("HELP_VM" pro nil (lib . "{18}/help_vm.pro") "%s" nil)
    ("goodfit" pro nil (lib . "{18}/goodfit.pro") "%s, Freq, A, B, ChiSqr, Prob, DF" (("Distr")))
    ("Stdev1" fun nil (lib . "{18}/goodfit.pro") "Result = %s(D, Freq)" nil)
    ("Gethelp" fun nil (lib . "{18}/gethelp.pro") "Result = %s(Uservar)" (("FULLSTRING") ("FUNCTIONS") ("ONELINE") ("PROCEDURES") ("SYS_FUNCS") ("SYS_PROCS")))
    ("MakeHelpString" fun nil (lib . "{18}/gethelp.pro") "Result = %s(Vname, Vvalue, Vsize)" (("ASSOC") ("FULLSTRING") ("ONELINE")))
    ("IS_ASSOC" fun nil (lib . "{18}/gethelp.pro") "Result = %s(Unit)" nil)
    ("gauss" fun nil (lib . "{18}/gauss.pro") "Result = %s(a)" nil)
    ("FSLID_Alloc" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Parent, Ptr" nil)
    ("FSLID_GenWid" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("FSLID_Generate" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Base, Ptr" nil)
    ("FSLID_Restore" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("FSLID_Save" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Unit, Ptr" nil)
    ("FSLID_Build" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("FSLID_Event" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Event" nil)
    ("FSLID_Destroy" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Ptr" nil)
    ("FSLID_Copy" pro nil (lib . "{18}/fslid_alloc.pro") "%s, Ptr, Copy" nil)
    ("FSLID_Icon" fun nil (lib . "{18}/fslid_alloc.pro") "Result = %s" nil)
    ("Friedman" pro nil (lib . "{18}/friedman.pro") "%s, Data, Rank, F, Prob, DF" (("List_Name") ("Names") ("NoPrint")))
    ("compute_rank" fun nil (lib . "{18}/friedman.pro") "Result = %s(x, SortD)" nil)
    ("fillcontour" pro nil (lib . "{18}/fillcontour.pro") "%s, data, x, y" (("_extra")))
    ("FIELD_Alloc" pro nil (lib . "{18}/field_alloc.pro") "%s, Parent, Ptr" nil)
    ("FIELD_GenWid" pro nil (lib . "{18}/field_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("FIELD_Generate" pro nil (lib . "{18}/field_alloc.pro") "%s, Base, Ptr" nil)
    ("FIELD_Restore" pro nil (lib . "{18}/field_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("FIELD_Save" pro nil (lib . "{18}/field_alloc.pro") "%s, Unit, Ptr" nil)
    ("FIELD_Build" pro nil (lib . "{18}/field_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("FIELD_Event" pro nil (lib . "{18}/field_alloc.pro") "%s, Event" nil)
    ("FIELD_Destroy" pro nil (lib . "{18}/field_alloc.pro") "%s, Ptr" nil)
    ("FIELD_Copy" pro nil (lib . "{18}/field_alloc.pro") "%s, Ptr, Copy" nil)
    ("FIELD_Icon" fun nil (lib . "{18}/field_alloc.pro") "Result = %s" nil)
    ("f_test1" fun nil (lib . "{18}/f_test1.pro") "Result = %s(X, DFN, DFD)" nil)
    ("f_test" fun nil (lib . "{18}/f_test.pro") "Result = %s(a, DFN, DFD)" nil)
    ("equal_variance" pro nil (lib . "{18}/equal_variance.pro") "%s, X1, FC, DF, P" (("Bartlett") ("Block") ("Box") ("Group_No") ("Hartley") ("Interactions_Two_Way") ("Levene") ("Missing") ("One_Way") ("TInteraction") ("Two_Way") ("Unequal_One_Way")))
    ("eigen_ii" fun nil (lib . "{18}/eigen_ii.pro") "Result = %s(a, eval)" (("double") ("itmax")))
    ("DRAW_Alloc" pro nil (lib . "{18}/draw_alloc.pro") "%s, Parent, Ptr" nil)
    ("DRAW_GenWid" pro nil (lib . "{18}/draw_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("DRAW_Generate" pro nil (lib . "{18}/draw_alloc.pro") "%s, Base, Ptr" nil)
    ("DRAW_Restore" pro nil (lib . "{18}/draw_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("DRAW_Save" pro nil (lib . "{18}/draw_alloc.pro") "%s, Unit, Ptr" nil)
    ("DRAW_Build" pro nil (lib . "{18}/draw_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("DRAW_Event" pro nil (lib . "{18}/draw_alloc.pro") "%s, Event" nil)
    ("DRAW_Destroy" pro nil (lib . "{18}/draw_alloc.pro") "%s, Ptr" nil)
    ("DRAW_Copy" pro nil (lib . "{18}/draw_alloc.pro") "%s, Ptr, Copy" nil)
    ("DRAW_Icon" fun nil (lib . "{18}/draw_alloc.pro") "Result = %s" nil)
    ("Disp_Txt" pro nil (lib . "{18}/disp_txt.pro") "%s, strings, fonts, yspace" (("Colors") ("Def_Color") ("Def_Font") ("Def_Just") ("Def_Size") ("Def_Style") ("W_Erase") ("Xstart") ("Ystart")))
    ("diffeq_45" pro nil (lib . "{18}/diffeq_45.pro") "%s, funct, init, start, finish, times, yvalues" (("Depvar") ("Listname") ("Params") ("report") ("tol")))
    ("diffeq_23" pro nil (lib . "{18}/diffeq_23.pro") "%s, funct, init, start, finish, times, yvalues" (("Depvar") ("Listname") ("Params") ("report") ("tol")))
    ("DEMO_MODE" fun nil (lib . "{18}/demo_mode.pro") "Result = %s" nil)
    ("CW_SAVESTATE" pro nil (lib . "{18}/cw_savestate.pro") "%s, base, state_base, new_state" nil)
    ("CW_LOADSTATE" pro nil (lib . "{18}/cw_loadstate.pro") "%s, base, state_base, state_stash, state" nil)
    ("CW_COLOR_INDEX" fun nil (lib . "{18}/cw_color_index.pro") "Result = %s(parent)" (("_EXTRA")))
    ("CW_BSELECTOR" fun nil (lib . "{18}/cw_bselector.pro") "Result = %s(parent, names)" (("EVENT_FUNCT") ("FONT") ("FRAME") ("IDS") ("LABEL_LEFT") ("LABEL_TOP") ("MAP") ("RETURN_ID") ("RETURN_INDEX") ("RETURN_NAME") ("RETURN_UVALUE") ("SET_VALUE") ("UVALUE") ("XSIZE") ("YOFFSET") ("YSIZE")))
    ("CW_BSELECTOR_EVENT" fun nil (lib . "{18}/cw_bselector.pro") "Result = %s(ev)" nil)
    ("CW_BSELECTOR_GETV" fun nil (lib . "{18}/cw_bselector.pro") "Result = %s(id)" nil)
    ("CW_BSELECTOR_SETV" pro nil (lib . "{18}/cw_bselector.pro") "%s, id, value" nil)
    ("cosines" fun nil (lib . "{18}/cosines.pro") "Result = %s(x, m)" nil)
    ("correl_matrix" fun nil (lib . "{18}/correl_matrix.pro") "Result = %s(X)" nil)
    ("Contingent" pro nil (lib . "{18}/contingent.pro") "%s, X, ChiSqr, Prob, DF" (("ColNames") ("List_Name") ("RowNames")))
    ("MakeTable" pro nil (lib . "{18}/contingent.pro") "%s, A, Table, ColNames, RowNames, R, C, RT, CT, unit" nil)
    ("color_edit" pro nil (lib . "{18}/color_edit.pro") "%s, colors_out" (("hls") ("hsv")))
    ("interp_colors" pro nil (lib . "{18}/color_edit.pro") "%s, pts, npts, colors" nil)
    ("color_edit_back" pro nil (lib . "{18}/color_edit.pro") "%s" nil)
    ("chi_sqr1" fun nil (lib . "{18}/chi_sqr1.pro") "Result = %s(X, DF)" nil)
    ("chi_sqr" fun nil (lib . "{18}/chi_sqr.pro") "Result = %s(a, DF)" nil)
    ("c_edit" pro nil (lib . "{18}/c_edit.pro") "%s, colors_out" (("hls") ("hsv")))
    ("interp_colors" pro nil (lib . "{18}/c_edit.pro") "%s, pts, npts, colors" nil)
    ("c_edit_back" pro nil (lib . "{18}/c_edit.pro") "%s" nil)
    ("draw_bar" pro nil (lib . "{18}/c_edit.pro") "%s, bar" nil)
    ("BUTTON_Alloc" pro nil (lib . "{18}/button_alloc.pro") "%s, Parent, Ptr" nil)
    ("BUTTON_GenWid" pro nil (lib . "{18}/button_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("BUTTON_Generate" pro nil (lib . "{18}/button_alloc.pro") "%s, Base, Ptr" nil)
    ("BUTTON_Restore" pro nil (lib . "{18}/button_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("BUTTON_Save" pro nil (lib . "{18}/button_alloc.pro") "%s, Unit, Ptr" nil)
    ("BUTTON_Build" pro nil (lib . "{18}/button_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("BUTTON_Event" pro nil (lib . "{18}/button_alloc.pro") "%s, Event" nil)
    ("BUTTON_Destroy" pro nil (lib . "{18}/button_alloc.pro") "%s, Ptr" nil)
    ("BUTTON_Copy" pro nil (lib . "{18}/button_alloc.pro") "%s, Ptr, Copy" nil)
    ("BUTTON_Icon" fun nil (lib . "{18}/button_alloc.pro") "Result = %s" nil)
    ("BMPBTN_Alloc" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Parent, Ptr" nil)
    ("BMPBTN_GenWid" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("BMPBTN_Generate" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Base, Ptr" nil)
    ("BMPBTN_Restore" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("BMPBTN_Save" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Unit, Ptr" nil)
    ("BMPBTN_Build" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("BMPBTN_Event" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Event" nil)
    ("BMPBTN_DrawBits" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, DlgInfo, Obj" nil)
    ("BMPBTN_Destroy" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Ptr" nil)
    ("BMPBTN_Copy" pro nil (lib . "{18}/bmpbtn_alloc.pro") "%s, Ptr, Copy" nil)
    ("BMPBTN_Icon" fun nil (lib . "{18}/bmpbtn_alloc.pro") "Result = %s" nil)
    ("BGROUP_Alloc" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Parent, Ptr" nil)
    ("BGROUP_GenWid" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("BGROUP_Generate" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Base, Ptr" nil)
    ("BGROUP_Restore" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("BGROUP_Save" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Unit, Ptr" nil)
    ("BGROUP_Build" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("BGROUP_Event" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Event" nil)
    ("BGROUP_Destroy" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Ptr" nil)
    ("BGROUP_Copy" pro nil (lib . "{18}/bgroup_alloc.pro") "%s, Ptr, Copy" nil)
    ("BGROUP_Icon" fun nil (lib . "{18}/bgroup_alloc.pro") "Result = %s" nil)
    ("betai" fun nil (lib . "{18}/betai.pro") "Result = %s(x, a, b)" nil)
    ("betac" fun nil (lib . "{18}/betai.pro") "Result = %s(a, b, x)" nil)
    ("BASE_Alloc" pro nil (lib . "{18}/base_alloc.pro") "%s, Parent, Ptr" nil)
    ("BASE_GenWid" pro nil (lib . "{18}/base_alloc.pro") "%s, Unit, Ptr, Parent" nil)
    ("urBase_GenWid" pro nil (lib . "{18}/base_alloc.pro") "%s, Unit, Ptr, Obj, Name" nil)
    ("BASE_Generate" pro nil (lib . "{18}/base_alloc.pro") "%s, Base, Ptr" nil)
    ("BASE_BuildAttr" pro nil (lib . "{18}/base_alloc.pro") "%s, Leader, Ptr, Obj" nil)
    ("BASE_Restore" pro nil (lib . "{18}/base_alloc.pro") "%s, Unit, Parent, Ptr" nil)
    ("urBASE_Restore" pro nil (lib . "{18}/base_alloc.pro") "%s, Unit, Parent, Ptr, Type" nil)
    ("BASE_Save" pro nil (lib . "{18}/base_alloc.pro") "%s, Unit, Ptr" nil)
    ("BASE_Build" pro nil (lib . "{18}/base_alloc.pro") "%s, Ptr, ParPtr" nil)
    ("BASE_Event" pro nil (lib . "{18}/base_alloc.pro") "%s, Event" nil)
    ("BASE_BarEvent" pro nil (lib . "{18}/base_alloc.pro") "%s, Event" nil)
    ("BASE_Destroy" pro nil (lib . "{18}/base_alloc.pro") "%s, Ptr" nil)
    ("BASE_Copy" pro nil (lib . "{18}/base_alloc.pro") "%s, Ptr, Copy" nil)
    ("BASE_Icon" fun nil (lib . "{18}/base_alloc.pro") "Result = %s" nil)
    ("anova_unequal" pro nil (lib . "{18}/anova_unequal.pro") "%s, Data1, FT_Test, FB_Test, FI_Test" (("BName") ("IName") ("ListName") ("Missing") ("No_Printout") ("TName")))
    ("mult" fun nil (lib . "{18}/anova_unequal.pro") "Result = %s(B, Y, R, C, I)" nil)
    ("make_matrix1" pro nil (lib . "{18}/anova_unequal.pro") "%s, T, Y, R, C" nil)
    ("Make_Matrix" pro nil (lib . "{18}/anova_unequal.pro") "%s, X, Y, R, C" nil)
    ("ComputeSSE" pro nil (lib . "{18}/anova_unequal.pro") "%s, B, YY, Y, R, C, I, SSE, BB" nil)
    ("FitI" fun nil (lib . "{18}/anova_unequal.pro") "Result = %s(G, R, C)" nil)
    ("RSI_INV" fun nil (lib . "{18}/anova_unequal.pro") "Result = %s(G, R, C)" nil)
    ("Fit" fun nil (lib . "{18}/anova_unequal.pro") "Result = %s(G, R, C)" nil)
    ("mult_matrix" fun nil (lib . "{18}/anova_unequal.pro") "Result = %s(X, Y, R, C)" nil)
    ("printout" pro nil (lib . "{18}/anova_unequal.pro") "%s, TName, BName, IName, SST, SSB, SSI, SSE, R, C, N, FT, FB, FI, unit" nil)
    ("Anova" pro nil (lib . "{18}/anova.pro") "%s, X1" (("BCName") ("BContrast") ("BName") ("DFC") ("DFE") ("DFFRC") ("DFR") ("FCTEst") ("FRCTest") ("FRTest") ("ICName") ("IContrast") ("Interactions_Two_Way") ("List_Name") ("Missing") ("No_Printout") ("One_Way") ("TCName") ("TContrast") ("TName") ("Two_Way") ("Unequal_One_Way")))
    ("ContrastH" pro nil (lib . "{18}/anova.pro") "%s, T, M, SS, MS, Names, n, rep, DFE, unit" nil)
    ("ADJCT" pro nil (lib . "{18}/adjct.pro") "%s" nil)
    ("ADDSYSVAR" pro nil (lib . "{18}/addsysvar.pro") "%s, Name, Type, String_length" nil)
    ("zoom_24" pro nil (lib . "{19}/zoom_24.pro") "%s" (("fact") ("right") ("xsize") ("ysize")))
    ("zoom" pro nil (lib . "{19}/zoom.pro") "%s" (("continuous") ("fact") ("interp") ("keep") ("new_window") ("xsize") ("ysize") ("zoom_window")))
    ("XVarEdit" pro nil (lib . "{19}/xvaredit.pro") "%s, var" (("GROUP") ("NAME") ("X_SCROLL_SIZE") ("Y_SCROLL_SIZE")))
    ("XvarEditField" fun nil (lib . "{19}/xvaredit.pro") "Result = %s(base, val, usetable, entries, nentries)" (("NAME") ("RECNAME") ("X_SCROLL_SIZE") ("Y_SCROLL_SIZE")))
    ("AddEditEntry" pro nil (lib . "{19}/xvaredit.pro") "%s, entries, nentries, thename, thetype, value" nil)
    ("XVarEdit_event" pro nil (lib . "{19}/xvaredit.pro") "%s, event" nil)
    ("XSurface" pro nil (lib . "{19}/xsurface.pro") "%s, DATA" (("BLOCK") ("GROUP")))
    ("XSurface_ev" pro nil (lib . "{19}/xsurface.pro") "%s, event" nil)
    ("XSurface_draw" pro nil (lib . "{19}/xsurface.pro") "%s" nil)
    ("xsq_test" fun nil (lib . "{19}/xsq_test.pro") "Result = %s(obfreq, exfreq)" (("excell") ("obcell") ("residual")))
    ("freq_cell" pro nil (lib . "{19}/xsq_test.pro") "%s, obfreq, exfreq" nil)
    ("XRegistered" fun nil (lib . "{19}/xregistered.pro") "Result = %s(NAME)" (("NOSHOW")))
    ("XPALETTE" pro nil (lib . "{19}/xpalette.pro") "%s" (("BLOCK") ("group") ("UPDATECALLBACK") ("UPDATECBDATA")))
    ("XP_EVENT" pro nil (lib . "{19}/xpalette.pro") "%s, event" nil)
    ("XP_BUTTON_EVENT" pro nil (lib . "{19}/xpalette.pro") "%s, event" nil)
    ("XP_CHANGE_COLOR" pro nil (lib . "{19}/xpalette.pro") "%s, type, value" nil)
    ("XP_REPLOT" pro nil (lib . "{19}/xpalette.pro") "%s, color_index, type" nil)
    ("XP_REDRAW" pro nil (lib . "{19}/xpalette.pro") "%s" nil)
    ("XP_XLCTCALLBACK" pro nil (lib . "{19}/xpalette.pro") "%s" nil)
    ("XP_ALERT_CALLER" pro nil (lib . "{19}/xpalette.pro") "%s" nil)
    ("XP_NEW_COLORS" fun nil (lib . "{19}/xpalette.pro") "Result = %s" nil)
    ("XMTool" pro nil (lib . "{19}/xmtool.pro") "%s" (("BLOCK") ("GROUP")))
    ("XManTool_event" pro nil (lib . "{19}/xmtool.pro") "%s, event" nil)
    ("UpdateXMToolList" pro nil (lib . "{19}/xmtool.pro") "%s, widList" nil)
    ("XMng_tmpl" pro nil (lib . "{19}/xmng_tmpl.pro") "%s" (("BLOCK") ("GROUP")))
    ("XMng_tmpl_ev" pro nil (lib . "{19}/xmng_tmpl.pro") "%s, event" nil)
    ("XMANAGER" pro nil (lib . "{19}/xmanager.pro") "%s, NAME, ID" (("BACKGROUND") ("CATCH") ("CLEANUP") ("EVENT_HANDLER") ("GROUP_LEADER") ("JUST_REG") ("MODAL") ("NO_BLOCK")))
    ("XMANAGER_EVLOOP_FAKE_MODAL" pro nil (lib . "{19}/xmanager.pro") "%s, ID" nil)
    ("XMANAGER_EVLOOP_REAL_MODAL" pro nil (lib . "{19}/xmanager.pro") "%s, modal_id" nil)
    ("XMANAGER_EVLOOP_STANDARD" pro nil (lib . "{19}/xmanager.pro") "%s" nil)
    ("XUNREGISTER" pro nil (lib . "{19}/xmanager.pro") "%s, corpse" nil)
    ("LookupManagedWidget" fun nil (lib . "{19}/xmanager.pro") "Result = %s(name)" nil)
    ("AddManagedWidget" pro nil (lib . "{19}/xmanager.pro") "%s, name, id" nil)
    ("ValidateManagedWidgets" pro nil (lib . "{19}/xmanager.pro") "%s" nil)
    ("XmanagerPrintError" pro nil (lib . "{19}/xmanager.pro") "%s" nil)
    ("XLoadct" pro nil (lib . "{19}/xloadct.pro") "%s" (("BLOCK") ("BOTTOM") ("FILE") ("GROUP") ("MODAL") ("NCOLORS") ("SILENT") ("UPDATECALLBACK") ("UPDATECBDATA") ("USE_CURRENT")))
    ("xloadct_event" pro nil (lib . "{19}/xloadct.pro") "%s, event" nil)
    ("xlct_transfer" pro nil (lib . "{19}/xloadct.pro") "%s" (("UPDATE")))
    ("xlct_draw_cps" pro nil (lib . "{19}/xloadct.pro") "%s, i, c" nil)
    ("xlct_show" pro nil (lib . "{19}/xloadct.pro") "%s" nil)
    ("xlct_alert_caller" pro nil (lib . "{19}/xloadct.pro") "%s" nil)
    ("XLCT_PSAVE" pro nil (lib . "{19}/xloadct.pro") "%s" nil)
    ("XInterAnimate" pro nil (lib . "{19}/xinteranimate.pro") "%s, RATE" (("BLOCK") ("CLOSE") ("CYCLE") ("FRAME") ("GROUP") ("IMAGE") ("KEEP_PIXMAPS") ("MODAL") ("MPEG_CLOSE") ("MPEG_FILENAME") ("MPEG_OPEN") ("ORDER") ("SET") ("SHOWLOAD") ("TITLE") ("TRACK") ("WINDOW") ("XOFFSET") ("YOFFSET")))
    ("xintanim_event" pro nil (lib . "{19}/xinteranimate.pro") "%s, ev" nil)
    ("xintanim_kill_pix" pro nil (lib . "{19}/xinteranimate.pro") "%s" nil)
    ("xfont" fun nil (lib . "{19}/xfont.pro") "Result = %s" (("GROUP") ("PRESERVE_FONT_INFO")))
    ("xfont_event" pro nil (lib . "{19}/xfont.pro") "%s, event" nil)
    ("xfont_scal_fname" fun nil (lib . "{19}/xfont.pro") "Result = %s(name)" nil)
    ("xfont_select" fun nil (lib . "{19}/xfont.pro") "Result = %s(sstring)" nil)
    ("XDistfile" pro nil (lib . "{19}/xdistfile.pro") "%s, FILENAME, SUBDIRECTORY" (("_EXTRA")))
    ("XDisplayFile" pro nil (lib . "{19}/xdisplayfile.pro") "%s, FILENAME" (("BLOCK") ("DONE_BUTTON") ("EDITABLE") ("FONT") ("GROUP") ("HEIGHT") ("MODAL") ("TEXT") ("TITLE") ("WIDTH") ("WTEXT")))
    ("XDispFile_evt" pro nil (lib . "{19}/xdisplayfile.pro") "%s, event" nil)
    ("XdispFile_write" pro nil (lib . "{19}/xdisplayfile.pro") "%s, wText, filename" nil)
    ("xbm_edit" pro nil (lib . "{19}/xbm_edit.pro") "%s" (("BLOCK") ("FILENAME") ("GROUP") ("XSIZE") ("YSIZE")))
    ("xbm_edit_ev" pro nil (lib . "{19}/xbm_edit.pro") "%s, event" nil)
    ("draw_pixel" pro nil (lib . "{19}/xbm_edit.pro") "%s, x, y, color" (("MARK")))
    ("update_display" pro nil (lib . "{19}/xbm_edit.pro") "%s" (("ROTATE")))
    ("write_wave" pro nil (lib . "{19}/write_wave.pro") "%s, filename, data" (("BIN") ("DATANAME") ("MESHNAME") ("NOMESHDEF") ("VECTOR")))
    ("WRITE_SYLK" fun nil (lib . "{19}/write_sylk.pro") "Result = %s(Outfile, SourceData)" (("STARTCOL") ("STARTROW")))
    ("WriteSylkCell" pro nil (lib . "{19}/write_sylk.pro") "%s, lunOutfile, Data, iRow, iCol" nil)
    ("WRITE_SRF" pro nil (lib . "{19}/write_srf.pro") "%s, FILE, IMG, R, G, B" (("ORDER") ("WRITE_32")))
    ("WRITE_SPR" pro nil (lib . "{19}/write_spr.pro") "%s, as, filename" nil)
    ("WRITE_PPM" pro nil (lib . "{19}/write_ppm.pro") "%s, FILE, Image" (("ASCII")))
    ("WRITE_PICT" pro nil (lib . "{19}/write_pict.pro") "%s, FILE, IMAGE, R, G, B" nil)
    ("PackData" fun nil (lib . "{19}/write_pict.pro") "Result = %s(image)" nil)
    ("write_pict_item" pro nil (lib . "{19}/write_pict.pro") "%s, unit, data, key" nil)
    ("WRITE_NRIF" pro nil (lib . "{19}/write_nrif.pro") "%s, FILE, IMAGE, R, G, B" nil)
    ("WRITE_GIF" pro nil (lib . "{19}/write_gif.pro") "%s, FILE, IMG, R, G, B" (("CLOSE") ("MULTIPLE")))
    ("WRITE_BMP" pro nil (lib . "{19}/write_bmp.pro") "%s, File, Image, Red, Green, Blue" (("FOUR_BIT") ("HEADER_DEFINE") ("Ihdr")))
    ("test_wf_draw" pro nil (lib . "{19}/wf_draw.pro") "%s" nil)
    ("wf_draw" pro nil (lib . "{19}/wf_draw.pro") "%s, x, y" (("COLD") ("COLOR") ("CONVERGENCE") ("DATA") ("DEVICE") ("FRONT_TYPE") ("INTERVAL") ("NORMAL") ("OCCLUDED") ("PSYM") ("STATIONARY") ("SYM_HT") ("SYM_LEN") ("THICK") ("WARM")))
    ("SPLINE_INTERP" pro nil (lib . "{19}/wf_draw.pro") "%s, x, y, xp, yp" (("INTERVAL") ("TORIG") ("TSPLINE")))
    ("warp_tri" fun nil (lib . "{19}/warp_tri.pro") "Result = %s(xo, yo, xi, yi, im_in)" (("EXTRAPOLATE") ("OUTPUT_SIZE") ("QUINTIC")))
    ("voronoi" pro nil (lib . "{19}/voronoi.pro") "%s, x, y, i0, c, xp, yp, rect" nil)
    ("VORONOI_SHOW" pro nil (lib . "{19}/voronoi.pro") "%s, n" nil)
    ("voronoi_get_intersect" pro nil (lib . "{19}/voronoi.pro") "%s, rect, x0, y0, dx, dy, xi, yi, nedge" nil)
    ("isright" fun nil (lib . "{19}/voronoi.pro") "Result = %s(x0, y0, x1, y1, x2, y2)" nil)
    ("VERT_T3D" fun nil (lib . "{19}/vert_t3d.pro") "Result = %s(vertex_list)" (("Matrix") ("No_Copy") ("No_Divide") ("Save_Divide")))
    ("VELOVECT" pro nil (lib . "{19}/velovect.pro") "%s, U, V, X, Y" (("_EXTRA") ("CLIP") ("Color") ("Dots") ("Length") ("Missing") ("NOCLIP") ("OVERPLOT")))
    ("VEL" pro nil (lib . "{19}/vel.pro") "%s, U, W" (("LENGTH") ("nsteps") ("nvecs") ("title") ("XMAX")))
    ("arrows" fun nil (lib . "{19}/vel.pro") "Result = %s(u, v, n, length)" (("nsteps")))
    ("ARRHEAD" pro nil (lib . "{19}/vel.pro") "%s, X" nil)
    ("vel_mybi" fun nil (lib . "{19}/vel.pro") "Result = %s(a, x, y)" nil)
    ("variance" fun nil (lib . "{19}/variance.pro") "Result = %s(X)" (("Double") ("NaN")))
    ("UNIQ" fun nil (lib . "{19}/uniq.pro") "Result = %s(ARRAY, IDX)" nil)
    ("TS_Smooth" fun nil (lib . "{19}/ts_smooth.pro") "Result = %s(x, Nvalues)" (("Backward") ("Double") ("Forward") ("NaN") ("Order")))
    ("TS_Fcast" fun nil (lib . "{19}/ts_fcast.pro") "Result = %s(x, p, Nvalues)" (("Backcast") ("Double") ("Reflect")))
    ("TS_Diff" fun nil (lib . "{19}/ts_diff.pro") "Result = %s(x, k)" (("Double")))
    ("TS_Coef" fun nil (lib . "{19}/ts_coef.pro") "Result = %s(x, p)" (("Double") ("MSE")))
    ("TRI_SURF" fun nil (lib . "{19}/tri_surf.pro") "Result = %s(z, x, y)" (("BOUNDS") ("EXTRAPOLATE") ("GS") ("LINEAR") ("MISSING") ("NX") ("NY") ("REGULAR") ("XGRID") ("XVALUES") ("YGRID") ("YVALUES")))
    ("trackball__define" pro nil (lib . "{19}/trackball__define.pro") "%s" nil)
    ("RESET" pro "TRACKBALL" (lib . "{19}/trackball__define.pro") "Obj ->[%s::]%s, center, radius" (("AXIS") ("CONSTRAIN") ("MOUSE")))
    ("CLEANUP" pro "TRACKBALL" (lib . "{19}/trackball__define.pro") "Obj ->[%s::]%s" nil)
    ("INIT" fun "TRACKBALL" (lib . "{19}/trackball__define.pro") "Result = Obj ->[%s::]%s(center, radius)" (("AXIS") ("CONSTRAIN") ("MOUSE")))
    ("UPDATE" fun "TRACKBALL" (lib . "{19}/trackball__define.pro") "Result = Obj ->[%s::]%s(sEvent)" (("MOUSE") ("TRANSFORM") ("TRANSLATE")))
    ("TRACKBALL_CONSTRAIN" fun nil (lib . "{19}/trackball__define.pro") "Result = %s(pt, vec)" nil)
    ("Trace" fun nil (lib . "{19}/trace.pro") "Result = %s(X)" (("Double")))
    ("tm_test" fun nil (lib . "{19}/tm_test.pro") "Result = %s(x0, x1)" (("paired") ("unequal")))
    ("ibeta" fun nil (lib . "{19}/tm_test.pro") "Result = %s(a, b, x)" nil)
    ("betacf" fun nil (lib . "{19}/tm_test.pro") "Result = %s(a, b, x)" nil)
    ("time_test" pro nil (lib . "{19}/time_test.pro") "%s, filename" (("NOFILEIO")))
    ("graphics_times" pro nil (lib . "{19}/time_test.pro") "%s, filename" nil)
    ("time_test3" pro nil (lib . "{19}/time_test.pro") "%s, filename" (("FACT") ("NOFILEIO")))
    ("time_test2" pro nil (lib . "{19}/time_test.pro") "%s, filename" (("NOFILEIO")))
    ("graphics_times3" pro nil (lib . "{19}/time_test.pro") "%s, filename" nil)
    ("graphics_times2" pro nil (lib . "{19}/time_test.pro") "%s, filename" nil)
    ("dummy" pro nil (lib . "{19}/time_test.pro") "%s, dummy" nil)
    ("reset" pro nil (lib . "{19}/time_test.pro") "%s, dummy" nil)
    ("time_compare" pro nil (lib . "{19}/time_test.pro") "%s, files, outfile" (("THRESHOLD")))
    ("init_time" pro nil (lib . "{19}/time_test.pro") "%s, file" nil)
    ("timer" pro nil (lib . "{19}/time_test.pro") "%s, name" nil)
    ("THREED" pro nil (lib . "{19}/threed.pro") "%s, A, SP" (("Title") ("Xtitle") ("Ytitle")))
    ("test_true" pro nil (lib . "{19}/test_true.pro") "%s" nil)
    ("col" fun nil (lib . "{19}/test_true.pro") "Result = %s(r, g, b)" nil)
    ("test_pcl" pro nil (lib . "{19}/test_pcl.pro") "%s" nil)
    ("pcl_optimize_test" pro nil (lib . "{19}/test_pcl.pro") "%s" nil)
    ("pcl_image_test" pro nil (lib . "{19}/test_pcl.pro") "%s" nil)
    ("pcl_line_test" pro nil (lib . "{19}/test_pcl.pro") "%s" nil)
    ("pcl_plot_test" pro nil (lib . "{19}/test_pcl.pro") "%s" nil)
    ("test_lj" pro nil (lib . "{19}/test_lj.pro") "%s" nil)
    ("lj_show3_test" pro nil (lib . "{19}/test_lj.pro") "%s" nil)
    ("lj_depth_test" pro nil (lib . "{19}/test_lj.pro") "%s" nil)
    ("lj_resolution_test" pro nil (lib . "{19}/test_lj.pro") "%s" nil)
    ("lj_image_test" pro nil (lib . "{19}/test_lj.pro") "%s" nil)
    ("lj_line_test" pro nil (lib . "{19}/test_lj.pro") "%s" nil)
    ("lj_plot_test" pro nil (lib . "{19}/test_lj.pro") "%s" nil)
    ("lj_loadct" pro nil (lib . "{19}/test_lj.pro") "%s" (("eight") ("four") ("sixteen")))
    ("TEST_HP" pro nil (lib . "{19}/test_hp.pro") "%s" (("EVASDROP") ("SMART")))
    ("hp_hwtext" pro nil (lib . "{19}/test_hp.pro") "%s" nil)
    ("hp_lines_and_color" pro nil (lib . "{19}/test_hp.pro") "%s" nil)
    ("hp_polyfill" pro nil (lib . "{19}/test_hp.pro") "%s, title" nil)
    ("hp_erase" pro nil (lib . "{19}/test_hp.pro") "%s" nil)
    ("hp_label_page" pro nil (lib . "{19}/test_hp.pro") "%s" nil)
    ("tek_color" pro nil (lib . "{19}/tek_color.pro") "%s, Start_index, Ncolors" nil)
    ("t_pdf" fun nil (lib . "{19}/t_pdf.pro") "Result = %s(v, df)" nil)
    ("t_cvf" fun nil (lib . "{19}/t_cvf.pro") "Result = %s(a1, df)" nil)
    ("t3d" pro nil (lib . "{19}/t3d.pro") "%s" (("MATRIX") ("OBLIQUE") ("PERSPECTIVE") ("RESET") ("ROTATE") ("SCALE") ("TRANSLATE") ("XYEXCH") ("XZEXCH") ("YZEXCH")))
    ("swap_endian" fun nil (lib . "{19}/swap_endian.pro") "Result = %s(in)" nil)
    ("svdleg" fun nil (lib . "{19}/svdleg.pro") "Result = %s(X, M)" nil)
    ("svdfunct" fun nil (lib . "{19}/svdfunct.pro") "Result = %s(X, M)" nil)
    ("SVDFIT" fun nil (lib . "{19}/svdfit.pro") "Result = %s(X, Y, M)" (("A") ("CHISQ") ("COVAR") ("DOUBLE") ("Function_name") ("LEGENDRE") ("SIGMA") ("SINGULAR") ("VARIANCE") ("WEIGHTS") ("YFIT")))
    ("surfr" pro nil (lib . "{19}/surfr.pro") "%s" (("ax") ("az")))
    ("Stretch" pro nil (lib . "{19}/stretch.pro") "%s, Low, High, Gamma" (("CHOP")))
    ("STR_SEP" fun nil (lib . "{19}/str_sep.pro") "Result = %s(str, separator)" (("ESC") ("REMOVE_ALL") ("TRIM")))
    ("STDDEV" fun nil (lib . "{19}/stddev.pro") "Result = %s(X)" (("Double") ("NaN")))
    ("Standardize" fun nil (lib . "{19}/standardize.pro") "Result = %s(X)" (("Double")))
    ("SPLINE_P" pro nil (lib . "{19}/spline_p.pro") "%s, x, y, xr, yr" (("INTERVAL") ("TAN0") ("TAN1")))
    ("spline" fun nil (lib . "{19}/spline.pro") "Result = %s(x, y, t, sigma)" nil)
    ("sph_scat" fun nil (lib . "{19}/sph_scat.pro") "Result = %s(lon, lat, f)" (("BOUNDS") ("BOUT") ("GOUT") ("GS") ("NLAT") ("NLON")))
    ("SPH_4PNT" pro nil (lib . "{19}/sph_4pnt.pro") "%s, X, Y, Z, Xc, Yc, Zc, R" (("Double")))
    ("slide_image" pro nil (lib . "{19}/slide_image.pro") "%s, image" (("BLOCK") ("CONGRID") ("FULL_WINDOW") ("GROUP") ("ORDER") ("REGISTER") ("RETAIN") ("SHOW_FULL") ("SLIDE_WINDOW") ("TITLE") ("TOP_ID") ("XSIZE") ("XVISIBLE") ("YSIZE") ("YVISIBLE")))
    ("SLIDE_IMG_EVENT" pro nil (lib . "{19}/slide_image.pro") "%s, ev" nil)
    ("Slicer3" pro nil (lib . "{19}/slicer3.pro") "%s, hData3D" (("DATA_NAMES") ("DETACH") ("GROUP") ("MODAL")))
    ("Viz3D_KillMain" pro nil (lib . "{19}/slicer3.pro") "%s, wMainBase" nil)
    ("Viz3D_KillDraw" pro nil (lib . "{19}/slicer3.pro") "%s, wDrawBase" nil)
    ("Viz3D_CleanBuffer" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" nil)
    ("Viz3D_CleanView" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("SKIP_BUFFER")))
    ("Viz3D_Event" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_OptEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_DiffShadeEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_ViewEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_ProbeEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_ProfileEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_ThreshEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_ProjectEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_SurfEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_BlockEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_SliceEvent" pro nil (lib . "{19}/slicer3.pro") "%s, event" nil)
    ("Viz3D_XYZPos" fun nil (lib . "{19}/slicer3.pro") "Result = %s(dX, dY, hDepth, hImage, invTrans)" (("ON_FACE")))
    ("Viz3D_Redraw" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" nil)
    ("Viz3D_ProfDraw" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" nil)
    ("Viz3D_ProbeDraw" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" nil)
    ("Viz3D_ProjDraw" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("SKIP_ADD") ("SKIP_DRAW")))
    ("Viz3D_SurfDraw" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState, hVertList, hPolyList, hColorList" (("CALC_SURF") ("SKIP_ADD") ("SKIP_DRAW")))
    ("Viz3D_BlockDraw" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("SKIP_ADD") ("SKIP_DRAW")))
    ("Viz3D_ObliqPlaneDraw" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState, vertPlane, vert3D" (("SKIP_ADD") ("SKIP_DRAW")))
    ("Viz3D_OrthoPlaneDraw" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("SKIP_ADD") ("SKIP_DRAW")))
    ("Viz3D_Add_Graphic" fun nil (lib . "{19}/slicer3.pro") "Result = %s(sMainState, graphic)" (("NO_COPY")))
    ("Viz3D_TranspValu" fun nil (lib . "{19}/slicer3.pro") "Result = %s(sMainState, planeDir)" nil)
    ("Viz3D_ProfShow" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("DIRECT")))
    ("Viz3D_ThreshShow" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("DYNAMIC")))
    ("Viz3D_SurfShow" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("CALC_HIST")))
    ("Viz3D_ViewShow" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" nil)
    ("Viz3D_BlockShow" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("DIRECT")))
    ("Viz3D_DrawData" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" nil)
    ("Viz3D_DrawCube" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" (("AXIS") ("DIRECT") ("SKIPAXIS") ("SKIPBACK") ("SKIPCUBE") ("SKIPFRONT")))
    ("Viz3D_SliceShow" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" nil)
    ("Viz3D_DrawSliceOblique" pro nil (lib . "{19}/slicer3.pro") "%s, obliqCenter, obliqNormal, fillColor, edgeColor, rangeX, rangeY, rangeZ, zScale" (("NORMCOLOR") ("SKIP_FILL") ("VERT_3D") ("VERT_PLANE")))
    ("Viz3D_ScaleData" fun nil (lib . "{19}/slicer3.pro") "Result = %s(data3D, sMainState)" nil)
    ("Viz3D_PutData" pro nil (lib . "{19}/slicer3.pro") "%s, data3D, sMainState, curData" nil)
    ("Viz3D_GetData" fun nil (lib . "{19}/slicer3.pro") "Result = %s(sMainState, curData)" nil)
    ("Viz3D_FillDepth" pro nil (lib . "{19}/slicer3.pro") "%s, sMainState" nil)
    ("Viz3D_View" fun nil (lib . "{19}/slicer3.pro") "Result = %s(viewWin)" (("ANG1") ("ANG2") ("ANG3") ("DIR1") ("DIR2") ("DIR3") ("PERSP") ("XMAX") ("YMAX") ("ZMAX") ("ZOOM") ("ZSCALE")))
    ("Viz3D_TransColor" fun nil (lib . "{19}/slicer3.pro") "Result = %s(sMainState, cIndex)" nil)
    ("Viz3D_LoadColor" fun nil (lib . "{19}/slicer3.pro") "Result = %s" (("CTAB") ("DIFFSHADE")))
    ("Viz3D_DiffColor" pro nil (lib . "{19}/slicer3.pro") "%s, sViz3DColors" nil)
    ("Viz3D_Reset" pro nil (lib . "{19}/slicer3.pro") "%s" nil)
    ("skey_sun" pro nil (lib . "{19}/skey_sun.pro") "%s" (("psterm")))
    ("skey_sgi" pro nil (lib . "{19}/skey_sgi.pro") "%s" nil)
    ("skey_mips" pro nil (lib . "{19}/skey_mips.pro") "%s" (("app_keypad") ("num_keypad")))
    ("skey_ibm" pro nil (lib . "{19}/skey_ibm.pro") "%s" nil)
    ("skey_hp" pro nil (lib . "{19}/skey_hp.pro") "%s" (("app_keypad") ("num_keypad")))
    ("skey_dec" pro nil (lib . "{19}/skey_dec.pro") "%s" (("app_keypad") ("eightbit") ("num_keypad")))
    ("SKEWNESS" fun nil (lib . "{19}/skewness.pro") "Result = %s(X)" (("Double") ("NaN")))
    ("ShowInfo" pro nil (lib . "{19}/showinfo.pro") "%s, fileName" (("BLOCK") ("FONT") ("GROUP") ("HEIGHT") ("INFOTEXT") ("NO_NEWLINE") ("TITLE") ("WIDTH") ("XOFFSET") ("YOFFSET")))
    ("GetInfoText" fun nil (lib . "{19}/showinfo.pro") "Result = %s(fileName)" (("HEIGHT") ("WIDTH")))
    ("ShowInfoEventHndlr" pro nil (lib . "{19}/showinfo.pro") "%s, event" nil)
    ("SHOWFONT" pro nil (lib . "{19}/showfont.pro") "%s, FONT, NAME" (("ENCAPSULATED") ("TT_FONT")))
    ("show3" pro nil (lib . "{19}/show3.pro") "%s, image, x, y" (("E_CONTOUR") ("E_SURFACE") ("INTERP") ("SSCALE")))
    ("SHADE_SURF_IRR" pro nil (lib . "{19}/shade_surf_irr.pro") "%s, z, x, y" (("AX") ("AZ") ("IMAGE") ("PLIST") ("SHADES") ("T3D")))
    ("sfit" fun nil (lib . "{19}/sfit.pro") "Result = %s(z, degree)" (("kx")))
    ("setup_keys" pro nil (lib . "{19}/setup_keys.pro") "%s" (("_EXTRA") ("ANSI") ("HP9000") ("IBM") ("MIPS") ("SGI") ("SUN") ("VT200")))
    ("Search3d" fun nil (lib . "{19}/search3d.pro") "Result = %s(array, xpos, ypos, zpos, min_val, max_val)" (("Decrease") ("Diagonal") ("Increase") ("Lpf_band")))
    ("Search2d" fun nil (lib . "{19}/search2d.pro") "Result = %s(array, xpos, ypos, min_val, max_val)" (("Decrease") ("Diagonal") ("Increase") ("Lpf_band")))
    ("scale3d" pro nil (lib . "{19}/scale3d.pro") "%s" nil)
    ("scale3" pro nil (lib . "{19}/scale3.pro") "%s" (("ax") ("az") ("xrange") ("yrange") ("zrange")))
    ("s_test" fun nil (lib . "{19}/s_test.pro") "Result = %s(x, y)" (("zdiff")))
    ("RSTRPOS" fun nil (lib . "{19}/rstrpos.pro") "Result = %s(Expr, SubStr, Pos)" nil)
    ("rs_test" fun nil (lib . "{19}/rs_test.pro") "Result = %s(x, y)" (("ux") ("uy")))
    ("ROT" fun nil (lib . "{19}/rot.pro") "Result = %s(A, ANGLE, MAG, X0, y0)" (("CUBIC") ("INTERP") ("MISSING") ("PIVOT")))
    ("reverse" fun nil (lib . "{19}/reverse.pro") "Result = %s(a, subscript)" nil)
    ("resolve_all" pro nil (lib . "{19}/resolve_all.pro") "%s" (("CONTINUE_ON_ERROR") ("QUIET") ("RESOLVE_FUNCTION") ("RESOLVE_PROCEDURE") ("SKIP_ROUTINES") ("UNRESOLVED")))
    ("resolve_all_body" fun nil (lib . "{19}/resolve_all.pro") "Result = %s(quiet, cont, do_func, skipr)" nil)
    ("REGRESS" fun nil (lib . "{19}/regress.pro") "Result = %s(X, Y, Weights, YFIT, Const, SIGMA, FTEST, R, RMUL, CHISQ, STATUS)" (("RELATIVE_weight")))
    ("REDUCE_COLORS" pro nil (lib . "{19}/reduce_colors.pro") "%s, Image, Values" nil)
    ("RECON3" fun nil (lib . "{19}/recon3.pro") "Result = %s(images, obj_rot, obj_pos, focal, distance, vol_pos, img_ref, img_mag, vol_size)" (("Cubic") ("Missing") ("Mode")))
    ("READ_XWD" fun nil (lib . "{19}/read_xwd.pro") "Result = %s(FILE_NAME, RED, GREEN, BLUE)" nil)
    ("READ_X11_BITMAP" pro nil (lib . "{19}/read_x11_bitmap.pro") "%s, FILE, BITMAP, X, Y" (("EXPAND_TO_BYTES")))
    ("read_wave" pro nil (lib . "{19}/read_wave.pro") "%s, filename, variables, names, dimensions" (("MESHNAMES")))
    ("readarray" fun nil (lib . "{19}/read_wave.pro") "Result = %s(len)" nil)
    ("getnum" fun nil (lib . "{19}/read_wave.pro") "Result = %s" (("BIN")))
    ("getdef" fun nil (lib . "{19}/read_wave.pro") "Result = %s" (("BIN") ("BLOCK")))
    ("getword" fun nil (lib . "{19}/read_wave.pro") "Result = %s" (("BIN")))
    ("READ_SYLK" fun nil (lib . "{19}/read_sylk.pro") "Result = %s(Infile)" (("ARRAY") ("COLMAJOR") ("NCOLS") ("NROWS") ("STARTCOL") ("STARTROW") ("USEDOUBLES") ("USELONGS")))
    ("GetSylkCellContents" fun nil (lib . "{19}/read_sylk.pro") "Result = %s(szFileLine, fUseLongs, fUseDoubles)" nil)
    ("GetSylkCellRange" fun nil (lib . "{19}/read_sylk.pro") "Result = %s(lunFile, strCellRange)" nil)
    ("GetSylkCellCol" fun nil (lib . "{19}/read_sylk.pro") "Result = %s(szCellLine)" nil)
    ("GetSylkCellRow" fun nil (lib . "{19}/read_sylk.pro") "Result = %s(szCellLine, iCurRow)" nil)
    ("ContainsVal" fun nil (lib . "{19}/read_sylk.pro") "Result = %s(LoVal, TestVal, HiVal)" nil)
    ("READ_SRF" pro nil (lib . "{19}/read_srf.pro") "%s, FILE, IMAGE, R, G, B" nil)
    ("READ_SPR" fun nil (lib . "{19}/read_spr.pro") "Result = %s(filename)" nil)
    ("READ_PPM" pro nil (lib . "{19}/read_ppm.pro") "%s, FILE, IMAGE" (("MAXVAL")))
    ("READ_PPM_NEXT_TOKEN" fun nil (lib . "{19}/read_ppm.pro") "Result = %s(unit, buffer)" nil)
    ("READ_PPM_NEXT_LINE" fun nil (lib . "{19}/read_ppm.pro") "Result = %s(unit)" nil)
    ("READ_PICT" pro nil (lib . "{19}/read_pict.pro") "%s, filename, resultimage, r, g, b" (("DEBUG")))
    ("UnPackData" fun nil (lib . "{19}/read_pict.pro") "Result = %s(width, height, unit)" nil)
    ("read_pict_item" pro nil (lib . "{19}/read_pict.pro") "%s, unit, data" nil)
    ("Read_Interfile" pro nil (lib . "{19}/read_interfile.pro") "%s, Filename, Data" nil)
    ("Inter_ReadData" pro nil (lib . "{19}/read_interfile.pro") "%s, Info, Data, Path" nil)
    ("GetIFSYM" fun nil (lib . "{19}/read_interfile.pro") "Result = %s(Name, Info)" (("INDEX")))
    ("Inter_ReadHdr" pro nil (lib . "{19}/read_interfile.pro") "%s, Unit, Info" nil)
    ("Inter_Fixed" pro nil (lib . "{19}/read_interfile.pro") "%s, KwdInfo, Value, Arr" nil)
    ("Inter_STR" pro nil (lib . "{19}/read_interfile.pro") "%s, KwdInfo, Value, Arr" nil)
    ("Inter_INT" pro nil (lib . "{19}/read_interfile.pro") "%s, KwdInfo, Value, Arr" nil)
    ("Inter_MakeInfo" pro nil (lib . "{19}/read_interfile.pro") "%s, Info, Filename" nil)
    ("GetPath" fun nil (lib . "{19}/read_interfile.pro") "Result = %s(File)" (("FILE") ("PATH")))
    ("READ_GIF" pro nil (lib . "{19}/read_gif.pro") "%s, FILE, IMAGE, R, G, B" (("CLOSE") ("MULTIPLE")))
    ("GifReadByte" fun nil (lib . "{19}/read_gif.pro") "Result = %s(unit)" nil)
    ("READ_DICOM" fun nil (lib . "{19}/read_dicom.pro") "Result = %s(file, red, green, blue)" (("IMAGE_INDEX")))
    ("ReadDicomGetFirstBefore" fun nil (lib . "{19}/read_dicom.pro") "Result = %s(oDicom, iref, imgid)" nil)
    ("READ_BMP" fun nil (lib . "{19}/read_bmp.pro") "Result = %s(File, Red, Green, Blue, Ihdr)" (("RGB")))
    ("read_ascii" fun nil (lib . "{19}/read_ascii.pro") "Result = %s(file)" (("COMMENT_SYMBOL") ("DATA_START") ("DELIMITER") ("MISSING_VALUE") ("NUM_RECORDS") ("RECORD_START") ("TEMPLATE")))
    ("ra_check_file" fun nil (lib . "{19}/read_ascii.pro") "Result = %s(fname)" (("default_num_columns")))
    ("ra_stringit" fun nil (lib . "{19}/read_ascii.pro") "Result = %s(value)" nil)
    ("ra_valid_template" fun nil (lib . "{19}/read_ascii.pro") "Result = %s(template, message)" nil)
    ("ra_read_from_templ" fun nil (lib . "{19}/read_ascii.pro") "Result = %s(name, template, start_record, records_to_read, doVerbose, num_fields_read, fieldNames, rec_count)" (("header")))
    ("ra_get_next_record" pro nil (lib . "{19}/read_ascii.pro") "%s, template, unit, lines" (("end_reached")))
    ("ra_parse_d_values" pro nil (lib . "{19}/read_ascii.pro") "%s, line, types, p_vals, floc, rec_count, delimit, nlut, missing_value" nil)
    ("ra_resize_pointers" pro nil (lib . "{19}/read_ascii.pro") "%s, p_vals, blk_size" nil)
    ("ra_parse_value" fun nil (lib . "{19}/read_ascii.pro") "Result = %s(line, type, sptr, len)" (("missing_value") ("nlut")))
    ("Rdpix" pro nil (lib . "{19}/rdpix.pro") "%s, Image, X0, Y0" nil)
    ("ranks" fun nil (lib . "{19}/ranks.pro") "Result = %s(x)" nil)
    ("r_test" fun nil (lib . "{19}/r_test.pro") "Result = %s(x)" (("n0") ("n1") ("r")))
    ("r_correlate" fun nil (lib . "{19}/r_correlate.pro") "Result = %s(x, y)" (("d") ("kendall") ("probd") ("zd")))
    ("erfcc" fun nil (lib . "{19}/r_correlate.pro") "Result = %s(x)" nil)
    ("ibeta" fun nil (lib . "{19}/r_correlate.pro") "Result = %s(a, b, x)" nil)
    ("betacf" fun nil (lib . "{19}/r_correlate.pro") "Result = %s(a, b, x)" nil)
    ("QUERY_SRF" fun nil (lib . "{19}/query_srf.pro") "Result = %s(FILE, INFO)" (("IMAGE_INDEX")))
    ("QUERY_PPM" fun nil (lib . "{19}/query_ppm.pro") "Result = %s(FILE, INFO)" (("IMAGE_INDEX") ("MAXVAL")))
    ("READ_PPM_NEXT_TOKEN" fun nil (lib . "{19}/query_ppm.pro") "Result = %s(unit, buffer)" nil)
    ("READ_PPM_NEXT_LINE" fun nil (lib . "{19}/query_ppm.pro") "Result = %s(unit)" nil)
    ("QUERY_PICT" fun nil (lib . "{19}/query_pict.pro") "Result = %s(FILE, INFO)" (("IMAGE_INDEX")))
    ("read_pict_item" pro nil (lib . "{19}/query_pict.pro") "%s, unit, data" nil)
    ("QUERY_GIF" fun nil (lib . "{19}/query_gif.pro") "Result = %s(FILE, INFO)" (("IMAGE_INDEX")))
    ("QUERY_DICOM" fun nil (lib . "{19}/query_dicom.pro") "Result = %s(file, info)" (("IMAGE_INDEX")))
    ("QueryDicomGetFirstBefore" fun nil (lib . "{19}/query_dicom.pro") "Result = %s(oDicom, iref, imgid)" nil)
    ("QUERY_BMP" fun nil (lib . "{19}/query_bmp.pro") "Result = %s(FILE, INFO)" (("IMAGE_INDEX")))
    ("pushd" pro nil (lib . "{19}/pushd.pro") "%s, dir" nil)
    ("PSEUDO" pro nil (lib . "{19}/pseudo.pro") "%s, LITLO, LITHI, SATLO, SATHI, HUE, LOOPS, COLR" nil)
    ("PSAFM" pro nil (lib . "{19}/psafm.pro") "%s, input_file, output_file" nil)
    ("PSAFM_ISOMAP" fun nil (lib . "{19}/psafm.pro") "Result = %s" nil)
    ("ps_show_fonts" pro nil (lib . "{19}/ps_show_fonts.pro") "%s" (("nolatin")))
    ("PS_SHOFONT" pro nil (lib . "{19}/ps_show_fonts.pro") "%s, font_kw" nil)
    ("Project_Vol" fun nil (lib . "{19}/project_vol.pro") "Result = %s(vol, x_sample, y_sample, z_sample)" (("Avg_Intensity") ("Cubic") ("Depth_q") ("Opaque") ("Trans") ("Xsize") ("Ysize") ("Z_Buffer")))
    ("profiles" pro nil (lib . "{19}/profiles.pro") "%s, image" (("order") ("sx") ("sy") ("wsize")))
    ("profile" fun nil (lib . "{19}/profile.pro") "Result = %s(image, xx, yy)" (("nomark") ("xstart") ("ystart")))
    ("printd" pro nil (lib . "{19}/printd.pro") "%s" nil)
    ("primes" fun nil (lib . "{19}/primes.pro") "Result = %s(k)" nil)
    ("popd" pro nil (lib . "{19}/popd.pro") "%s" nil)
    ("POLYWARP" pro nil (lib . "{19}/polywarp.pro") "%s, XI, YI, XO, YO, DEGREE, KX, KY" nil)
    ("POLYFITW" fun nil (lib . "{19}/polyfitw.pro") "Result = %s(X, Y, W, NDEGREE, YFIT, YBAND, SIGMA, A)" nil)
    ("POLY_FIT" fun nil (lib . "{19}/poly_fit.pro") "Result = %s(X, Y, NDEGREE, YFIT, YBAND, SIGMA, CORRM)" (("DOUBLE")))
    ("Poly_area" fun nil (lib . "{19}/poly_area.pro") "Result = %s(x, y)" (("SIGNED")))
    ("POLY" fun nil (lib . "{19}/poly.pro") "Result = %s(X, C)" nil)
    ("polar_surface" fun nil (lib . "{19}/polar_surface.pro") "Result = %s(z, r, theta)" (("BOUNDS") ("GRID") ("MISSING") ("QUINTIC") ("SPACING")))
    ("Polar_Contour" pro nil (lib . "{19}/polar_contour.pro") "%s, z, theta, r" (("_Extra") ("DITHER") ("SHOW_TRIANGULATION")))
    ("Pnt_Line" fun nil (lib . "{19}/pnt_line.pro") "Result = %s(p0, l0, l1, pl)" (("INTERVAL")))
    ("PLOTERR" pro nil (lib . "{19}/ploterr.pro") "%s, X, Y, ERR" (("psym") ("type")))
    ("Plot_field" pro nil (lib . "{19}/plot_field.pro") "%s, U, V" (("ASPECT") ("LENGTH") ("N") ("title")))
    ("arrows" fun nil (lib . "{19}/plot_field.pro") "Result = %s(u, v, n, length, xmax, lmax)" nil)
    ("ARRHEAD" pro nil (lib . "{19}/plot_field.pro") "%s, X" nil)
    ("mybi" fun nil (lib . "{19}/plot_field.pro") "Result = %s(a, x, y)" nil)
    ("Plot_3dbox" pro nil (lib . "{19}/plot_3dbox.pro") "%s, X, Y, Z" (("_EXTRA") ("BACKGROUND") ("COLOR") ("GRIDSTYLE") ("LINESTYLE") ("PSYM") ("SOLID_WALLS") ("SUBTITLE") ("TITLE") ("XTITLE") ("XY_PLANE") ("XYSTYLE") ("XZ_PLANE") ("XZSTYLE") ("YTITLE") ("YZ_PLANE") ("YZSTYLE") ("ZTITLE")))
    ("P_Correlate" fun nil (lib . "{19}/p_correlate.pro") "Result = %s(X, Y, C)" (("Double")))
    ("OPLOTERR" pro nil (lib . "{19}/oploterr.pro") "%s, X, Y, ERR, PSYM" nil)
    ("Norm" fun nil (lib . "{19}/norm.pro") "Result = %s(A)" (("Double")))
    ("ncdf_exists" fun nil (lib . "{19}/ncdf_exists.pro") "Result = %s" nil)
    ("ncdf_control" pro nil (lib . "{19}/ncdf_exists.pro") "%s, cid" (("VERBOSE")))
    ("multi" pro nil (lib . "{19}/multi.pro") "%s, n" nil)
    ("MPEG_SAVE" pro nil (lib . "{19}/mpeg_save.pro") "%s, mpegID" (("FILENAME")))
    ("MPEG_PUT" pro nil (lib . "{19}/mpeg_put.pro") "%s, mpegID" (("COLOR") ("FRAME") ("IMAGE") ("ORDER") ("WINDOW")))
    ("MPEG_OPEN" fun nil (lib . "{19}/mpeg_open.pro") "Result = %s(dimensions)" (("FILENAME")))
    ("MPEG_CLOSE" pro nil (lib . "{19}/mpeg_close.pro") "%s, mpegID" nil)
    ("Moment" fun nil (lib . "{19}/moment.pro") "Result = %s(X)" (("Double") ("Maxmoment") ("Mdev") ("NaN") ("Sdev")))
    ("idl_moment_total" fun nil (lib . "{19}/moment.pro") "Result = %s(Arg)" (("Double")))
    ("MODIFYCT" pro nil (lib . "{19}/modifyct.pro") "%s, ITAB, NAME, R, G, B" (("FILE")))
    ("mk_html_help" pro nil (lib . "{19}/mk_html_help.pro") "%s, sources, outfile" (("STRICT") ("TITLE") ("VERBOSE")))
    ("mhh_gen_file" pro nil (lib . "{19}/mk_html_help.pro") "%s, dict, txt_file, infiles, libfiles, outfile, verbose, title, strict" nil)
    ("mhh_grab_hdr" pro nil (lib . "{19}/mk_html_help.pro") "%s, name, dict, infile_indx, libfile_indx, txt_file, verbose, strict" nil)
    ("mhh_strict" pro nil (lib . "{19}/mk_html_help.pro") "%s, txtlines" nil)
    ("min_curve_surf" fun nil (lib . "{19}/min_curve_surf.pro") "Result = %s(z, x, y)" (("BOUNDS") ("GS") ("NX") ("NY") ("REGULAR") ("TPS") ("XGRID") ("XOUT") ("XPOUT") ("XVALUES") ("YGRID") ("YOUT") ("YPOUT") ("YVALUES")))
    ("MESH_OBJ" pro nil (lib . "{19}/mesh_obj.pro") "%s, obj_type, vertex_list, polygon_list, array1, array2" (("Degrees") ("P1") ("P2") ("P3") ("P4") ("P5")))
    ("MeanAbsDev" fun nil (lib . "{19}/meanabsdev.pro") "Result = %s(X)" (("Double") ("Median") ("NaN")))
    ("MEAN" fun nil (lib . "{19}/mean.pro") "Result = %s(X)" (("Double") ("NaN")))
    ("md_test" fun nil (lib . "{19}/md_test.pro") "Result = %s(x)" (("above") ("below") ("mdc")))
    ("MAP_SET" pro nil (lib . "{19}/map_set.pro") "%s, p0lat, p0lon, rot" nil)
    ("map_set_clip" pro nil (lib . "{19}/map_set.pro") "%s" (("CLIP_RADIUS") ("IPROJ") ("PNAME")))
    ("map_set_split" pro nil (lib . "{19}/map_set.pro") "%s" (("ADD") ("EQUATOR")))
    ("map_horizon" pro nil (lib . "{19}/map_set.pro") "%s" (("_EXTRA") ("FILL") ("NVERTS") ("ZVALUE")))
    ("map_GoodeSeg" pro nil (lib . "{19}/map_set.pro") "%s, x0, y0, x1, y1" (("_EXTRA") ("FILL")))
    ("map_proj_info" pro nil (lib . "{19}/map_set.pro") "%s, iproj" (("AZIMUTHAL") ("CIRCLE") ("CONIC") ("CURRENT") ("CYLINDRICAL") ("LL_LIMITS") ("NAME") ("PROJ_NAMES") ("SCALE") ("UV_LIMITS") ("UVRANGE")))
    ("map_satellite_limit" pro nil (lib . "{19}/map_set.pro") "%s, n, xr, yr" nil)
    ("GREAT_CIRCLE" fun nil (lib . "{19}/map_set.pro") "Result = %s(lon0, lat0, lon1, lat1)" (("PRINT") ("RADIANS")))
    ("map_rotxyz" fun nil (lib . "{19}/map_set.pro") "Result = %s(p, rx, ry, rz)" nil)
    ("map_set_limits" pro nil (lib . "{19}/map_set.pro") "%s, limit, uvrange" (("CYLINDRICAL")))
    ("map_set_ll_box" pro nil (lib . "{19}/map_set.pro") "%s" nil)
    ("map_point_valid" fun nil (lib . "{19}/map_set.pro") "Result = %s(lon, lat, u, v)" nil)
    ("MAP_STRUCT_MERGE" pro nil (lib . "{19}/map_set.pro") "%s, orig, add" (("SUPERCEDE")))
    ("map_struct_append" pro nil (lib . "{19}/map_set.pro") "%s, In_struct, Name, Value" (("SUPERCEDE")))
    ("map_patch" fun nil (lib . "{19}/map_patch.pro") "Result = %s(Image_Orig, Lons, Lats)" (("DEBUG") ("LAT0") ("LAT1") ("LATMAX") ("LATMIN") ("LON0") ("LON1") ("LONMAX") ("LONMIN") ("MAX_VALUE") ("MISSING") ("TRIANGULATE") ("XSIZE") ("XSTART") ("YSIZE") ("YSTART")))
    ("map_reduce_360" fun nil (lib . "{19}/map_patch.pro") "Result = %s(a)" nil)
    ("map_image" fun nil (lib . "{19}/map_image.pro") "Result = %s(Image_Orig, Startx, Starty, xsize, ysize)" (("BILINEAR") ("COMPRESS") ("LATMAX") ("LATMIN") ("LONMAX") ("LONMIN") ("MAX_VALUE") ("MIN_VALUE") ("MISSING") ("SCALE") ("WHOLE_MAP")))
    ("map_image_missing" fun nil (lib . "{19}/map_image.pro") "Result = %s(image_orig, max_value, min_value)" nil)
    ("map_grid" pro nil (lib . "{19}/map_grid.pro") "%s" (("_EXTRA") ("BOX_AXES") ("CHARSIZE") ("CLIP_TEXT") ("COLOR") ("FILL_HORIZON") ("GLINESTYLE") ("GLINETHICK") ("HORIZON") ("INCREMENT") ("LABEL") ("LATALIGN") ("LATDEL") ("LATLAB") ("LATNAMES") ("LATS") ("LONALIGN") ("LONDEL") ("LONLAB") ("LONNAMES") ("LONS") ("NO_GRID") ("ORIENTATION") ("T3D") ("WHOLE_MAP") ("ZVALUE")))
    ("MAP_GRID_SOLVE" fun nil (lib . "{19}/map_grid.pro") "Result = %s(c0, c1, Icoord, Gwant)" nil)
    ("map_grid_incr" fun nil (lib . "{19}/map_grid.pro") "Result = %s(span)" nil)
    ("Map_Continents" pro nil (lib . "{19}/map_continents.pro") "%s" (("_EXTRA") ("COASTS") ("COLOR") ("CONTINENTS") ("COUNTRIES") ("FILL_CONTINENTS") ("HIRES") ("LIMITS") ("MLINESTYLE") ("MLINETHICK") ("ORIENTATION") ("RIVERS") ("SPACING") ("T3D") ("USA") ("ZVALUE")))
    ("map_do_segments" pro nil (lib . "{19}/map_continents.pro") "%s, fnames, name, hires, bounds, zvalue, extra" (("POLYFILL")))
    ("map_getindex" fun nil (lib . "{19}/map_continents.pro") "Result = %s(indx, error)" nil)
    ("M_Correlate" fun nil (lib . "{19}/m_correlate.pro") "Result = %s(X, Y)" (("Double")))
    ("LU_Complex" fun nil (lib . "{19}/lu_complex.pro") "Result = %s(A, B)" (("Double") ("Inverse") ("Sparse")))
    ("loadct" pro nil (lib . "{19}/loadct.pro") "%s, table_number" (("BOTTOM") ("FILE") ("GET_NAMES") ("NCOLORS") ("SILENT")))
    ("lmfunct" fun nil (lib . "{19}/lmfunct.pro") "Result = %s(x, a)" nil)
    ("lmfit" fun nil (lib . "{19}/lmfit.pro") "Result = %s(x, y, a)" (("alpha") ("chisq") ("CONVERGENCE") ("covar") ("double") ("fita") ("Function_Name") ("iter") ("itmax") ("itmin") ("SIGMA") ("tol") ("weights")))
    ("LL_ARC_DISTANCE" fun nil (lib . "{19}/ll_arc_distance.pro") "Result = %s(lon_lat0, arc_dist, az)" (("DEGREES")))
    ("ljlct" pro nil (lib . "{19}/ljlct.pro") "%s" nil)
    ("LinFit" fun nil (lib . "{19}/linfit.pro") "Result = %s(x, y)" (("chisqr") ("Double") ("prob") ("sdev") ("sig_ab") ("sigma")))
    ("Leefilt" fun nil (lib . "{19}/leefilt.pro") "Result = %s(A, N, Sig)" (("EXACT")))
    ("Lee_filter_fast" fun nil (lib . "{19}/leefilt.pro") "Result = %s(A, N, SIG)" nil)
    ("Lee_filter_exact" fun nil (lib . "{19}/leefilt.pro") "Result = %s(A, N, SIG)" nil)
    ("LadFit" fun nil (lib . "{19}/ladfit.pro") "Result = %s(x, y)" (("absdev") ("Double")))
    ("MDfunc" fun nil (lib . "{19}/ladfit.pro") "Result = %s(b, x, y, a, absdev)" nil)
    ("LABEL_DATE" fun nil (lib . "{19}/label_date.pro") "Result = %s(axis, index, x)" (("DATE_FORMAT") ("MONTHS") ("OFFSET")))
    ("kw_test" fun nil (lib . "{19}/kw_test.pro") "Result = %s(x)" (("df") ("missing")))
    ("KURTOSIS" fun nil (lib . "{19}/kurtosis.pro") "Result = %s(X)" (("Double") ("NaN")))
    ("krig2d" fun nil (lib . "{19}/krig2d.pro") "Result = %s(z, x, y)" (("BOUNDS") ("C0") ("EXPONENTIAL") ("GS") ("NESTED") ("NX") ("NY") ("REGULAR") ("SPHERICAL") ("XGRID") ("XVALUES") ("YGRID") ("YVALUES")))
    ("Krig_sphere" fun nil (lib . "{19}/krig2d.pro") "Result = %s(d, t)" nil)
    ("Krig_expon" fun nil (lib . "{19}/krig2d.pro") "Result = %s(d, t)" nil)
    ("JULDAY" fun nil (lib . "{19}/julday.pro") "Result = %s(MONTH, DAY, YEAR, Hour, Minute, Second)" nil)
    ("INTERPOL" fun nil (lib . "{19}/interpol.pro") "Result = %s(V, X, U)" nil)
    ("INT_TABULATED_2D" fun nil (lib . "{19}/int_tabulated_2d.pro") "Result = %s(x, y, z)" nil)
    ("TetraVolume" fun nil (lib . "{19}/int_tabulated_2d.pro") "Result = %s(x, y, z)" nil)
    ("Int_Tabulated" fun nil (lib . "{19}/int_tabulated.pro") "Result = %s(X, F)" (("Double") ("Sort")))
    ("Int_3D" fun nil (lib . "{19}/int_3d.pro") "Result = %s(Fxyz, AB_Limits, PQ_Limits, UV_Limits, Pts)" (("Double")))
    ("Int_2D" fun nil (lib . "{19}/int_2d.pro") "Result = %s(Fxy, AB_Limits, PQ_Limits, Pts)" (("Double") ("Order")))
    ("InsVis" pro nil (lib . "{19}/insvis.pro") "%s, name1, name2" (("_EXTRA")))
    ("InsPut" pro nil (lib . "{19}/insput.pro") "%s, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25" (("_EXTRA")))
    ("InsGet" fun nil (lib . "{19}/insget.pro") "Result = %s(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25)" (("_EXTRA")))
    ("image_cont" pro nil (lib . "{19}/image_cont.pro") "%s, a" (("ASPECT") ("INTERP") ("WINDOW_SCALE")))
    ("igamma_pdf" fun nil (lib . "{19}/igamma_pdf.pro") "Result = %s(a, x)" nil)
    ("g_fract" pro nil (lib . "{19}/igamma_pdf.pro") "%s, result, x, a" nil)
    ("g_series" pro nil (lib . "{19}/igamma_pdf.pro") "%s, result, x, a" nil)
    ("igamma" fun nil (lib . "{19}/igamma.pro") "Result = %s(a, x)" (("itmax") ("method")))
    ("IDLInfo" pro nil (lib . "{19}/idlinfo.pro") "%s" nil)
    ("IDLgrLegend__Define" pro nil (lib . "{19}/idlgrlegend__define.pro") "%s" nil)
    ("GetProperty" pro "IDLgrLegend" (lib . "{19}/idlgrlegend__define.pro") "Obj ->[%s::]%s" (("ALL") ("BORDER_GAP") ("COLUMNS") ("FILL_COLOR") ("FONT") ("GAP") ("GLYPH_WIDTH") ("HIDE") ("ITEM_COLOR") ("ITEM_LINESTYLE") ("ITEM_NAME") ("ITEM_OBJECT") ("ITEM_THICK") ("ITEM_TYPE") ("NAME") ("OUTLINE_COLOR") ("OUTLINE_THICK") ("PARENT") ("SHOW_FILL") ("SHOW_OUTLINE") ("TEXT_COLOR") ("TITLE") ("UVALUE") ("XCOORD_CONV") ("XRANGE") ("YCOORD_CONV") ("YRANGE") ("ZCOORD_CONV") ("ZRANGE")))
    ("SetProperty" pro "IDLgrLegend" (lib . "{19}/idlgrlegend__define.pro") "Obj ->[%s::]%s" (("_EXTRA") ("BORDER_GAP") ("COLUMNS") ("FILL_COLOR") ("FONT") ("GAP") ("GLYPH_WIDTH") ("HIDE") ("ITEM_COLOR") ("ITEM_LINESTYLE") ("ITEM_NAME") ("ITEM_OBJECT") ("ITEM_RGB") ("ITEM_THICK") ("ITEM_TYPE") ("NAME") ("OUTLINE_COLOR") ("OUTLINE_THICK") ("RECOMPUTE") ("SHOW_FILL") ("SHOW_OUTLINE") ("TEXT_COLOR") ("TITLE") ("UVALUE") ("XCOORD_CONV") ("YCOORD_CONV") ("ZCOORD_CONV")))
    ("Cleanup" pro "IDLgrLegend" (lib . "{19}/idlgrlegend__define.pro") "Obj ->[%s::]%s" nil)
    ("Draw" pro "IDLgrLegend" (lib . "{19}/idlgrlegend__define.pro") "Obj ->[%s::]%s, oSrcDest, oView" nil)
    ("ComputeDimensions" fun "IDLgrLegend" (lib . "{19}/idlgrlegend__define.pro") "Result = Obj ->[%s::]%s(oSrcDest)" (("PATH")))
    ("CreateGlyphs" pro "IDLgrLegend" (lib . "{19}/idlgrlegend__define.pro") "Obj ->[%s::]%s" nil)
    ("DefaultArrays" pro "IDLgrLegend" (lib . "{19}/idlgrlegend__define.pro") "Obj ->[%s::]%s" nil)
    ("Init" fun "IDLgrLegend" (lib . "{19}/idlgrlegend__define.pro") "Result = Obj ->[%s::]%s(aItemNames)" (("_EXTRA") ("BORDER_GAP") ("COLUMNS") ("FILL_COLOR") ("FONT") ("GAP") ("GLYPH_WIDTH") ("HIDE") ("ITEM_COLOR") ("ITEM_LINESTYLE") ("ITEM_NAME") ("ITEM_OBJECT") ("ITEM_RGB") ("ITEM_THICK") ("ITEM_TYPE") ("NAME") ("OUTLINE_COLOR") ("OUTLINE_THICK") ("SHOW_FILL") ("SHOW_OUTLINE") ("TEXT_COLOR") ("TITLE") ("UVALUE") ("XCOORD_CONV") ("YCOORD_CONV") ("ZCOORD_CONV")))
    ("IDLgrColorbar__Define" pro nil (lib . "{19}/idlgrcolorbar__define.pro") "%s" nil)
    ("GetProperty" pro "IDLgrColorbar" (lib . "{19}/idlgrcolorbar__define.pro") "Obj ->[%s::]%s" (("ALL") ("BLUE_VALUES") ("COLOR") ("DIMENSIONS") ("GREEN_VALUES") ("HIDE") ("MAJOR") ("MINOR") ("NAME") ("PALETTE") ("PARENT") ("RED_VALUES") ("SHOW_AXIS") ("SHOW_OUTLINE") ("SUBTICKLEN") ("THICK") ("THREED") ("TICKFORMAT") ("TICKFRMTDATA") ("TICKLEN") ("TICKTEXT") ("TICKVALUES") ("TITLE") ("UVALUE") ("XCOORD_CONV") ("XRANGE") ("YCOORD_CONV") ("YRANGE") ("ZCOORD_CONV") ("ZRANGE")))
    ("SetProperty" pro "IDLgrColorbar" (lib . "{19}/idlgrcolorbar__define.pro") "Obj ->[%s::]%s" (("_EXTRA") ("BLUE_VALUES") ("COLOR") ("DIMENSIONS") ("GREEN_VALUES") ("HIDE") ("MAJOR") ("MINOR") ("NAME") ("PALETTE") ("RED_VALUES") ("SHOW_AXIS") ("SHOW_OUTLINE") ("SUBTICKLEN") ("THICK") ("THREED") ("TICKFORMAT") ("TICKFRMTDATA") ("TICKLEN") ("TICKTEXT") ("TICKVALUES") ("TITLE") ("UVALUE") ("XCOORD_CONV") ("YCOORD_CONV") ("ZCOORD_CONV")))
    ("Cleanup" pro "IDLgrColorbar" (lib . "{19}/idlgrcolorbar__define.pro") "Obj ->[%s::]%s" nil)
    ("CalcSize" pro "IDLgrColorbar" (lib . "{19}/idlgrcolorbar__define.pro") "Obj ->[%s::]%s" (("DIMENSIONS") ("SHOW_AXIS") ("THICK")))
    ("ComputeDimensions" fun "IDLgrColorbar" (lib . "{19}/idlgrcolorbar__define.pro") "Result = Obj ->[%s::]%s(oSrcDest)" (("PATH")))
    ("Init" fun "IDLgrColorbar" (lib . "{19}/idlgrcolorbar__define.pro") "Result = Obj ->[%s::]%s(aRed, aGreen, aBlue)" (("_EXTRA") ("BLUE_VALUES") ("COLOR") ("DIMENSIONS") ("GREEN_VALUES") ("HIDE") ("MAJOR") ("MINOR") ("NAME") ("PALETTE") ("RED_VALUES") ("SHOW_AXIS") ("SHOW_OUTLINE") ("SUBTICKLEN") ("THICK") ("THREED") ("TICKFORMAT") ("TICKFRMTDATA") ("TICKLEN") ("TICKTEXT") ("TICKVALUES") ("TITLE") ("UVALUE") ("XCOORD_CONV") ("YCOORD_CONV") ("ZCOORD_CONV")))
    ("IDL_CRANK" pro nil (lib . "{19}/idl_crank.pro") "%s, w, s" nil)
    ("Identity" fun nil (lib . "{19}/identity.pro") "Result = %s(N)" (("Double")))
    ("ibeta_pdf" fun nil (lib . "{19}/ibeta_pdf.pro") "Result = %s(x, a, b)" nil)
    ("betacf" fun nil (lib . "{19}/ibeta_pdf.pro") "Result = %s(a, b, x)" nil)
    ("ibeta" fun nil (lib . "{19}/ibeta.pro") "Result = %s(a, b, x)" nil)
    ("gammln" fun nil (lib . "{19}/ibeta.pro") "Result = %s(xx)" nil)
    ("betacf" fun nil (lib . "{19}/ibeta.pro") "Result = %s(a, b, x)" nil)
    ("HSV" pro nil (lib . "{19}/hsv.pro") "%s, Vlo, Vhi, Satlo, Sathi, Hue, Loops, Colr" nil)
    ("HLS" pro nil (lib . "{19}/hls.pro") "%s, Litlo, Lithi, Satlo, Sathi, Hue, Loops, Colr" nil)
    ("HIST_EQUAL" fun nil (lib . "{19}/hist_equal.pro") "Result = %s(A)" (("BINSIZE") ("HISTOGRAM_ONLY") ("MAXV") ("MINV") ("TOP")))
    ("hist_2d" fun nil (lib . "{19}/hist_2d.pro") "Result = %s(im1, im2)" (("Bin1") ("Bin2") ("Max1") ("Max2") ("Min1") ("Min2")))
    ("HILBERT" fun nil (lib . "{19}/hilbert.pro") "Result = %s(X, D)" nil)
    ("hdf_exists" fun nil (lib . "{19}/hdf_exists.pro") "Result = %s" nil)
    ("hdf_df24_lastref" fun nil (lib . "{19}/hdf_exists.pro") "Result = %s(x)" nil)
    ("Hanning" fun nil (lib . "{19}/hanning.pro") "Result = %s(N1, N2)" (("Alpha")))
    ("h_eq_int" pro nil (lib . "{19}/h_eq_int.pro") "%s, image" nil)
    ("h_eq_ct" pro nil (lib . "{19}/h_eq_ct.pro") "%s, image" nil)
    ("GS_ITER" fun nil (lib . "{19}/gs_iter.pro") "Result = %s(A, B)" (("Check") ("Double") ("Lambda") ("Max_Iter") ("Tol") ("X_0")))
    ("get_screen_size" fun nil (lib . "{19}/get_screen_size.pro") "Result = %s(display_arg)" (("DISPLAY_NAME") ("RESOLUTION")))
    ("Gaussfit" fun nil (lib . "{19}/gaussfit.pro") "Result = %s(x, y, a)" (("ESTIMATES") ("NTERMS")))
    ("GAUSS_FUNCT" pro nil (lib . "{19}/gaussfit.pro") "%s, X, A, F, PDER" nil)
    ("gauss_pdf" fun nil (lib . "{19}/gauss_pdf.pro") "Result = %s(v)" nil)
    ("gauss_cvf" fun nil (lib . "{19}/gauss_cvf.pro") "Result = %s(p)" nil)
    ("Gauss2dfit" fun nil (lib . "{19}/gauss2dfit.pro") "Result = %s(z, a, x, y)" (("NEGATIVE") ("TILT")))
    ("GAUSS2_FUNCT" pro nil (lib . "{19}/gauss2dfit.pro") "%s, X, A, F, PDER" nil)
    ("gamma_ct" pro nil (lib . "{19}/gamma_ct.pro") "%s, gamma" (("CURRENT") ("INTENSITY")))
    ("gamma" fun nil (lib . "{19}/gamma.pro") "Result = %s(x)" (("_EXTRA")))
    ("fx_root" fun nil (lib . "{19}/fx_root.pro") "Result = %s(xi, func)" (("double") ("itmax") ("stop") ("tol")))
    ("fv_test" fun nil (lib . "{19}/fv_test.pro") "Result = %s(x0, x1)" nil)
    ("ibeta" fun nil (lib . "{19}/fv_test.pro") "Result = %s(a, b, x)" nil)
    ("betacf" fun nil (lib . "{19}/fv_test.pro") "Result = %s(a, b, x)" nil)
    ("FUNCT" pro nil (lib . "{19}/funct.pro") "%s, X, A, F, PDER" nil)
    ("flow3" pro nil (lib . "{19}/flow3.pro") "%s, vx, vy, vz" (("arrowsize") ("blob") ("len") ("nsteps") ("nvecs") ("sx") ("sy") ("sz")))
    ("arrow3" pro nil (lib . "{19}/flow3.pro") "%s, x0, y0, z0, x1, y1, z1, flags, arrowsize" nil)
    ("blob3" pro nil (lib . "{19}/flow3.pro") "%s, x0, y0, z0" nil)
    ("flick" pro nil (lib . "{19}/flick.pro") "%s, a, b, rate" nil)
    ("FILEPATH" fun nil (lib . "{19}/filepath.pro") "Result = %s(FILENAME)" (("ROOT_DIR") ("SUBDIRECTORY") ("TERMINAL") ("TMP")))
    ("factorial" fun nil (lib . "{19}/factorial.pro") "Result = %s(n)" (("stirling")))
    ("f_pdf" fun nil (lib . "{19}/f_pdf.pro") "Result = %s(x, dfn, dfd)" nil)
    ("f_cvf" fun nil (lib . "{19}/f_cvf.pro") "Result = %s(p, dfn, dfd)" nil)
    ("Extract_Slice" fun nil (lib . "{19}/extract_slice.pro") "Result = %s(vol, x_size, y_size, x_center, y_center, z_center, x_rot, y_rot, z_rot)" (("Cubic") ("Out_Val") ("Radians") ("Sample")))
    ("test_extrac" pro nil (lib . "{19}/extrac.pro") "%s" nil)
    ("extrac_errprint" pro nil (lib . "{19}/extrac.pro") "%s, n, is, want" nil)
    ("EXTRAC" fun nil (lib . "{19}/extrac.pro") "Result = %s(Array, P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15)" nil)
    ("EXPAND" pro nil (lib . "{19}/expand.pro") "%s, a, nx, ny, result" (("fillval") ("maxval")))
    ("Errplot" pro nil (lib . "{19}/errplot.pro") "%s, X, Low, High" (("Width")))
    ("EigenVec" fun nil (lib . "{19}/eigenvec.pro") "Result = %s(A, Eval)" (("Double") ("ItMax") ("Residual")))
    ("efont" pro nil (lib . "{19}/efont.pro") "%s, init_font" (("BLOCK") ("FILE") ("GROUP")))
    ("read_font" pro nil (lib . "{19}/efont.pro") "%s, index, fonttab, unit, nchars, ctab, vects" nil)
    ("efont_event" pro nil (lib . "{19}/efont.pro") "%s, event" nil)
    ("rw_font_char" pro nil (lib . "{19}/efont.pro") "%s, charflg, writeflg" nil)
    ("cload_proc" pro nil (lib . "{19}/efont.pro") "%s, event" nil)
    ("save_font" pro nil (lib . "{19}/efont.pro") "%s, unit, fonttab, index, vectors, chartab" nil)
    ("save_char" pro nil (lib . "{19}/efont.pro") "%s, cindex, ctab, cvects" nil)
    ("CMODE_EVENT" pro nil (lib . "{19}/efont.pro") "%s, event" nil)
    ("VIEW_EVENT" pro nil (lib . "{19}/efont.pro") "%s, event" nil)
    ("str_to_ccode" fun nil (lib . "{19}/efont.pro") "Result = %s(t)" nil)
    ("REMOVE_VECTOR" pro nil (lib . "{19}/efont.pro") "%s, x0, y0" nil)
    ("pnt_line" fun nil (lib . "{19}/efont.pro") "Result = %s(x0, y0, lx0, ly0, lx1, ly1)" nil)
    ("Order_vectors" pro nil (lib . "{19}/efont.pro") "%s, ctab, cvects" nil)
    ("ADD_VECTOR" pro nil (lib . "{19}/efont.pro") "%s, v0, v1" nil)
    ("draw_grid" pro nil (lib . "{19}/efont.pro") "%s, color" nil)
    ("draw_font" pro nil (lib . "{19}/efont.pro") "%s" nil)
    ("redraw" pro nil (lib . "{19}/efont.pro") "%s, map" nil)
    ("draw_char" pro nil (lib . "{19}/efont.pro") "%s, x0, y0, siz, vects" (("color")))
    ("translate_vects" pro nil (lib . "{19}/efont.pro") "%s, in, x, y, pen_up" nil)
    ("doc_library" pro nil (lib . "{19}/doc_library.pro") "%s, name" (("directory") ("FILE") ("multi") ("PATH") ("print")))
    ("DL_VMS" pro nil (lib . "{19}/dl_vms.pro") "%s, NAME" (("FILE") ("NOFILEMSG") ("PATH") ("PRINT")))
    ("dl_unix" pro nil (lib . "{19}/dl_unix.pro") "%s, name" (("directory") ("multi") ("print")))
    ("DL_MAC" pro nil (lib . "{19}/dl_mac.pro") "%s, NAME" (("DIRECTORY") ("PRINT")))
    ("doc_file" pro nil (lib . "{19}/dl_mac.pro") "%s, name, outunit" nil)
    ("dl_dos" pro nil (lib . "{19}/dl_dos.pro") "%s, name" (("directory") ("print")))
    ("doc_file" pro nil (lib . "{19}/dl_dos.pro") "%s, name, outunit" nil)
    ("dist" fun nil (lib . "{19}/dist.pro") "Result = %s(n, m)" nil)
    ("DISSOLVE" pro nil (lib . "{19}/dissolve.pro") "%s, image" (("DELAY") ("ORDER") ("SIZ") ("X0") ("Y0")))
    ("DIGITAL_FILTER" fun nil (lib . "{19}/digital_filter.pro") "Result = %s(FLOW, FHIGH, A, NTERMS)" nil)
    ("Determ" fun nil (lib . "{19}/determ.pro") "Result = %s(A)" (("Check") ("Double") ("Zero")))
    ("Derivsig" fun nil (lib . "{19}/derivsig.pro") "Result = %s(X, Y, sigx, sigy)" nil)
    ("Deriv" fun nil (lib . "{19}/deriv.pro") "Result = %s(X, Y)" nil)
    ("Defroi" fun nil (lib . "{19}/defroi.pro") "Result = %s(Sx, Sy, Xverts, Yverts)" (("NOFILL") ("NOREGION") ("RESTORE") ("X0") ("Y0") ("ZOOM")))
    ("cw_zoom" fun nil (lib . "{19}/cw_zoom.pro") "Result = %s(parent)" (("FRAME") ("MAX") ("MIN") ("RETAIN") ("SAMPLE") ("SCALE") ("TRACK") ("UVALUE") ("X_SCROLL_SIZE") ("X_ZSIZE") ("XSIZE") ("Y_SCROLL_SIZE") ("Y_ZSIZE") ("YSIZE")))
    ("zoom_event" fun nil (lib . "{19}/cw_zoom.pro") "Result = %s(event)" nil)
    ("draw_zoom" pro nil (lib . "{19}/cw_zoom.pro") "%s, state, newx, newy" nil)
    ("zoom_get_value" fun nil (lib . "{19}/cw_zoom.pro") "Result = %s(id)" nil)
    ("zoom_set_value" pro nil (lib . "{19}/cw_zoom.pro") "%s, id, value" nil)
    ("cw_tmpl" fun nil (lib . "{19}/cw_tmpl.pro") "Result = %s(parent)" (("UVALUE")))
    ("tmpl_event" fun nil (lib . "{19}/cw_tmpl.pro") "Result = %s(ev)" nil)
    ("tmpl_get_value" fun nil (lib . "{19}/cw_tmpl.pro") "Result = %s(id)" nil)
    ("tmpl_set_value" pro nil (lib . "{19}/cw_tmpl.pro") "%s, id, value" nil)
    ("CW_RGBSLIDER" fun nil (lib . "{19}/cw_rgbslider.pro") "Result = %s(parent)" (("cmy") ("COLOR_INDEX") ("drag") ("frame") ("hls") ("hsv") ("LENGTH") ("rgb") ("uvalue") ("vertical")))
    ("CW_RGB_GET_VAL" fun nil (lib . "{19}/cw_rgbslider.pro") "Result = %s(id)" nil)
    ("CW_RGB_SET_VAL" pro nil (lib . "{19}/cw_rgbslider.pro") "%s, id, value" nil)
    ("CW_RGB_EVENT" fun nil (lib . "{19}/cw_rgbslider.pro") "Result = %s(ev)" nil)
    ("CW_RGB_SET_DRAW" pro nil (lib . "{19}/cw_rgbslider.pro") "%s, state" nil)
    ("CW_RGB_CHNG_CS" pro nil (lib . "{19}/cw_rgbslider.pro") "%s, state, base_idx" nil)
    ("CW_PDMENU" fun nil (lib . "{19}/cw_pdmenu.pro") "Result = %s(parent, desc)" (("COLUMN") ("DELIMITER") ("FONT") ("HELP") ("IDS") ("MBAR") ("RETURN_FULL_NAME") ("RETURN_ID") ("RETURN_INDEX") ("RETURN_NAME") ("UVALUE") ("XOFFSET") ("YOFFSET")))
    ("CW_PDMENU_BUILD" pro nil (lib . "{19}/cw_pdmenu.pro") "%s, parent, desc, cur, n, ev_type, full_qual_str, delim, ids, mbars, HELP_KW" (("FONT")))
    ("CW_PDMENU_EVENT" fun nil (lib . "{19}/cw_pdmenu.pro") "Result = %s(ev)" nil)
    ("CW_ORIENT" fun nil (lib . "{19}/cw_orient.pro") "Result = %s(parent)" (("AX") ("AZ") ("FRAME") ("TITLE") ("UVALUE") ("XSIZE") ("YSIZE")))
    ("CW_ORIENT_EVENT" fun nil (lib . "{19}/cw_orient.pro") "Result = %s(ev)" nil)
    ("drawbox" pro nil (lib . "{19}/cw_orient.pro") "%s, state" (("FINAL")))
    ("cw_fslider" fun nil (lib . "{19}/cw_fslider.pro") "Result = %s(parent)" (("DRAG") ("EDIT") ("FORMAT") ("FRAME") ("MAXIMUM") ("MINIMUM") ("SCROLL") ("SUPPRESS_VALUE") ("TITLE") ("UVALUE") ("VALUE") ("VERTICAL") ("XSIZE") ("YSIZE")))
    ("fslide_event" fun nil (lib . "{19}/cw_fslider.pro") "Result = %s(ev)" nil)
    ("fslider_get_value" fun nil (lib . "{19}/cw_fslider.pro") "Result = %s(id)" (("MINMAX")))
    ("fslider_set_value" pro nil (lib . "{19}/cw_fslider.pro") "%s, id, value" nil)
    ("CW_FORM" fun nil (lib . "{19}/cw_form.pro") "Result = %s(parent, desc)" (("COLUMN") ("IDS") ("TITLE") ("UVALUE")))
    ("cw_form_modal_event" pro nil (lib . "{19}/cw_form.pro") "%s, ev" nil)
    ("CW_FORM_GETV" fun nil (lib . "{19}/cw_form.pro") "Result = %s(id)" nil)
    ("CW_FORM_SETV" pro nil (lib . "{19}/cw_form.pro") "%s, id, value" nil)
    ("CW_FORM_EVENT" fun nil (lib . "{19}/cw_form.pro") "Result = %s(ev)" nil)
    ("CW_FORM_BUILD" pro nil (lib . "{19}/cw_form.pro") "%s, parent, desc, cur, ids, lasttag" nil)
    ("CW_FORM_LABEL" pro nil (lib . "{19}/cw_form.pro") "%s, parent, nparent, e, frame" nil)
    ("CW_FORM_APPEND" pro nil (lib . "{19}/cw_form.pro") "%s, extra, e, keyword" (("ACTUAL_KEYWORD") ("USE_VALUE")))
    ("CW_FORM_PARSE" fun nil (lib . "{19}/cw_form.pro") "Result = %s(Extra, Name, Value)" (("Index")))
    ("CW_FIELD" fun nil (lib . "{19}/cw_field.pro") "Result = %s(Parent)" (("ALL_EVENTS") ("COLUMN") ("FIELDFONT") ("FLOATING") ("FONT") ("FRAME") ("INTEGER") ("LONG") ("NOEDIT") ("RETURN_EVENTS") ("ROW") ("STRING") ("TEXT_FRAME") ("TITLE") ("UVALUE") ("VALUE") ("XSIZE") ("YSIZE")))
    ("CW_FIELD_EVENT" fun nil (lib . "{19}/cw_field.pro") "Result = %s(Event)" nil)
    ("CW_FIELD_FLOAT" pro nil (lib . "{19}/cw_field.pro") "%s, Ch, State, Event, Altered" nil)
    ("CW_FIELD_EXPONENT" fun nil (lib . "{19}/cw_field.pro") "Result = %s(Value, Idx)" nil)
    ("CW_FIELD_INT" pro nil (lib . "{19}/cw_field.pro") "%s, Ch, State, Event, Altered" nil)
    ("CW_FIELD_GET" fun nil (lib . "{19}/cw_field.pro") "Result = %s(Base)" nil)
    ("CW_FIELD_SET" pro nil (lib . "{19}/cw_field.pro") "%s, Base, Value" nil)
    ("CW_FIELD_VALUE" fun nil (lib . "{19}/cw_field.pro") "Result = %s(Value, Type)" nil)
    ("CW_FIELD_VALIDATE" fun nil (lib . "{19}/cw_field.pro") "Result = %s(Value)" nil)
    ("CW_DICE" fun nil (lib . "{19}/cw_dice.pro") "Result = %s(parent, value)" (("TUMBLE_CNT") ("TUMBLE_PERIOD") ("UVALUE")))
    ("CW_DICE_GET_VAL" fun nil (lib . "{19}/cw_dice.pro") "Result = %s(id)" nil)
    ("CW_DICE_SET_VAL" pro nil (lib . "{19}/cw_dice.pro") "%s, id, value" nil)
    ("CW_DICE_EVENT" fun nil (lib . "{19}/cw_dice.pro") "Result = %s(ev)" nil)
    ("CW_DICE_ROLL" pro nil (lib . "{19}/cw_dice.pro") "%s, dice, state" nil)
    ("CW_DEFROI" fun nil (lib . "{19}/cw_defroi.pro") "Result = %s(draw)" (("IMAGE_SIZE") ("OFFSET") ("ORDER") ("RESTORE") ("ZOOM")))
    ("CW_DEFROI_event" pro nil (lib . "{19}/cw_defroi.pro") "%s, ev, s" nil)
    ("CW_DEFROI_DRAW" pro nil (lib . "{19}/cw_defroi.pro") "%s, s, i" (("FILL")))
    ("CW_DEFROI_nmode" pro nil (lib . "{19}/cw_defroi.pro") "%s, s, new" nil)
    ("CW_COLORSEL" fun nil (lib . "{19}/cw_colorsel.pro") "Result = %s(parent)" (("FRAME") ("UVALUE") ("XOFFSET") ("YOFFSET")))
    ("CSEL_GET_VALUE" fun nil (lib . "{19}/cw_colorsel.pro") "Result = %s(id)" nil)
    ("CSEL_SET_VALUE" pro nil (lib . "{19}/cw_colorsel.pro") "%s, id, value" nil)
    ("CSEL_REALIZE" pro nil (lib . "{19}/cw_colorsel.pro") "%s, id" nil)
    ("CSEL_EVENT" fun nil (lib . "{19}/cw_colorsel.pro") "Result = %s(ev)" nil)
    ("CSEL_MVMARK" pro nil (lib . "{19}/cw_colorsel.pro") "%s, state, to_index" nil)
    ("CSEL_NEW_COLORS" fun nil (lib . "{19}/cw_colorsel.pro") "Result = %s(state)" nil)
    ("CSEL_SETSLIDERS" pro nil (lib . "{19}/cw_colorsel.pro") "%s, state, type, cur_x, cur_y, idx" nil)
    ("CW_CLR_INDEX" fun nil (lib . "{19}/cw_clr_index.pro") "Result = %s(parent)" (("COLOR_VALUES") ("EVENT_FUNC") ("FRAME") ("LABEL") ("NCOLORS") ("START_COLOR") ("UVALUE") ("XSIZE") ("YSIZE")))
    ("CW_COLOR_INDEXS" pro nil (lib . "{19}/cw_clr_index.pro") "%s, id, value" nil)
    ("CW_COLOR_INDEXG" fun nil (lib . "{19}/cw_clr_index.pro") "Result = %s(id)" nil)
    ("CW_COLOR_INDEXE" fun nil (lib . "{19}/cw_clr_index.pro") "Result = %s(ev)" nil)
    ("CW_BGROUP" fun nil (lib . "{19}/cw_bgroup.pro") "Result = %s(parent, names)" (("BUTTON_UVALUE") ("COLUMN") ("EVENT_FUNCT") ("EXCLUSIVE") ("FONT") ("FRAME") ("IDS") ("LABEL_LEFT") ("LABEL_TOP") ("MAP") ("NO_RELEASE") ("NONEXCLUSIVE") ("RETURN_ID") ("RETURN_INDEX") ("RETURN_NAME") ("ROW") ("SCROLL") ("SET_VALUE") ("SPACE") ("UVALUE") ("X_SCROLL_SIZE") ("XOFFSET") ("XPAD") ("XSIZE") ("Y_SCROLL_SIZE") ("YOFFSET") ("YPAD") ("YSIZE")))
    ("CW_BGROUP_EVENT" fun nil (lib . "{19}/cw_bgroup.pro") "Result = %s(ev)" nil)
    ("CW_BGROUP_GETV" fun nil (lib . "{19}/cw_bgroup.pro") "Result = %s(id, value)" nil)
    ("CW_BGROUP_SETV" pro nil (lib . "{19}/cw_bgroup.pro") "%s, id, value" nil)
    ("ARCBALL_TEST" pro nil (lib . "{19}/cw_arcball.pro") "%s" nil)
    ("arcball_event" pro nil (lib . "{19}/cw_arcball.pro") "%s, event" nil)
    ("CW_ARCBALL" fun nil (lib . "{19}/cw_arcball.pro") "Result = %s(parent)" (("COLORS") ("FRAME") ("LABEL") ("RETAIN") ("SIZE") ("UPDATE") ("UVALUE") ("VALUE")))
    ("CW_ARCBALL_SET" pro nil (lib . "{19}/cw_arcball.pro") "%s, id, value" nil)
    ("CW_ARCBALL_GET" fun nil (lib . "{19}/cw_arcball.pro") "Result = %s(id)" nil)
    ("CW_ARCBALL_EVENT" fun nil (lib . "{19}/cw_arcball.pro") "Result = %s(event)" nil)
    ("CW_ARCBALL_HELP" pro nil (lib . "{19}/cw_arcball.pro") "%s, top" nil)
    ("CW_ARCBALL_DRAW" pro nil (lib . "{19}/cw_arcball.pro") "%s, state" (("DO_ARC")))
    ("ARCBALL_AXIS_ARC" pro nil (lib . "{19}/cw_arcball.pro") "%s, p, cx, cy, radius" (("COLOR")))
    ("ARCBALL_ARC" pro nil (lib . "{19}/cw_arcball.pro") "%s, p0, p1, cx, cy, radius" (("COLOR")))
    ("quaternion_m3" fun nil (lib . "{19}/cw_arcball.pro") "Result = %s(q)" nil)
    ("arcball_constrain" fun nil (lib . "{19}/cw_arcball.pro") "Result = %s(pt0, axis)" nil)
    ("CW_ANIMATE" fun nil (lib . "{19}/cw_animate.pro") "Result = %s(parent, sizex, sizey, nframes)" (("CYCLE") ("DRAW") ("INFO_FILE") ("NO_KILL") ("OPEN_FUNC") ("PIXMAPS") ("TRACK") ("UVALUE")))
    ("InitBitmapButtons" pro nil (lib . "{19}/cw_animate.pro") "%s" nil)
    ("CW_ANIMATE_INIT" pro nil (lib . "{19}/cw_animate.pro") "%s, wAnimateBase, sizex, sizey, nframes" (("PIXMAPS")))
    ("CW_ANIMATE_GETP" pro nil (lib . "{19}/cw_animate.pro") "%s, widget, PIXMAPS" (("KILL_ANYWAY")))
    ("CW_ANIMATE_RUN" pro nil (lib . "{19}/cw_animate.pro") "%s, widget, rate" (("DELTA") ("LASTFRAME") ("NFRAMES") ("STOP")))
    ("CW_ANIMATE_LOAD" pro nil (lib . "{19}/cw_animate.pro") "%s, widget" (("CYCLE") ("FRAME") ("IMAGE") ("ORDER") ("TRACK") ("WINDOW") ("XOFFSET") ("YOFFSET")))
    ("CW_ANIMATE_EV" fun nil (lib . "{19}/cw_animate.pro") "Result = %s(event)" nil)
    ("CW_ANIMATE_CLN" pro nil (lib . "{19}/cw_animate.pro") "%s, widget" nil)
    ("SetBitmapButtons" pro nil (lib . "{19}/cw_animate.pro") "%s, state" nil)
    ("Cvttobm" fun nil (lib . "{19}/cvttobm.pro") "Result = %s(array)" (("THRESHOLD")))
    ("CV_COORD" fun nil (lib . "{19}/cv_coord.pro") "Result = %s" (("Degrees") ("From_Cylin") ("From_Polar") ("From_Rect") ("From_Sphere") ("To_Cylin") ("To_Polar") ("To_Rect") ("To_Sphere")))
    ("CURVEFIT" fun nil (lib . "{19}/curvefit.pro") "Result = %s(x, y, weights, a, sigma)" (("CHI2") ("CHISQ") ("FUNCTION_NAME") ("ITER") ("ITMAX") ("NODERIVATIVE") ("TOL")))
    ("cti_test" fun nil (lib . "{19}/cti_test.pro") "Result = %s(obfreq)" (("coeff") ("corrected") ("cramv") ("df") ("exfreq") ("residual")))
    ("CT_LUMINANCE" fun nil (lib . "{19}/ct_luminance.pro") "Result = %s(R, G, B)" (("BRIGHT") ("DARK") ("READ_TABLES")))
    ("CrvLength" fun nil (lib . "{19}/crvlength.pro") "Result = %s(X, Y)" (("Double")))
    ("Crossp" fun nil (lib . "{19}/crossp.pro") "Result = %s(v1, v2)" nil)
    ("CREATE_WEEKENDS" pro nil (lib . "{19}/create_weekends.pro") "%s, day_names" nil)
    ("Create_View" pro nil (lib . "{19}/create_view.pro") "%s" (("Ax") ("Ay") ("Az") ("Persp") ("Radians") ("Winx") ("Winy") ("Xmax") ("Xmin") ("Ymax") ("Ymin") ("Zfac") ("Zmax") ("Zmin") ("Zoom")))
    ("Cramer" fun nil (lib . "{19}/cramer.pro") "Result = %s(A, B)" (("Double") ("Zero")))
    ("Correlate" fun nil (lib . "{19}/correlate.pro") "Result = %s(X, Y)" (("Covariance") ("Double")))
    ("CRR_MTRX" fun nil (lib . "{19}/correlate.pro") "Result = %s(X)" (("Double")))
    ("Cov_Mtrx" fun nil (lib . "{19}/correlate.pro") "Result = %s(X)" (("Double")))
    ("idl_corr_total" fun nil (lib . "{19}/correlate.pro") "Result = %s(Arg)" (("Double")))
    ("COORD2TO3" fun nil (lib . "{19}/coord2to3.pro") "Result = %s(MX, MY, DIM, D0, PTI)" nil)
    ("CONGRID" fun nil (lib . "{19}/congrid.pro") "Result = %s(arr, x, y, z)" (("CUBIC") ("INTERP") ("MINUS_ONE")))
    ("Cond" fun nil (lib . "{19}/cond.pro") "Result = %s(A)" (("Double")))
    ("complexround" fun nil (lib . "{19}/complexround.pro") "Result = %s(z)" nil)
    ("comfit" fun nil (lib . "{19}/comfit.pro") "Result = %s(x, y, a)" (("exponential") ("geometric") ("gompertz") ("hyperbolic") ("logistic") ("logsquare") ("sigma") ("weights") ("yfit")))
    ("logsq_func" pro nil (lib . "{19}/comfit.pro") "%s, x, a, f, pder" nil)
    ("log_func" pro nil (lib . "{19}/comfit.pro") "%s, x, a, f, pder" nil)
    ("hyp_func" pro nil (lib . "{19}/comfit.pro") "%s, x, a, f, pder" nil)
    ("gom_func" pro nil (lib . "{19}/comfit.pro") "%s, x, a, f, pder" nil)
    ("geo_func" pro nil (lib . "{19}/comfit.pro") "%s, x, a, f, pder" nil)
    ("exp_func" pro nil (lib . "{19}/comfit.pro") "%s, x, a, f, pder" nil)
    ("colormap_applicable" fun nil (lib . "{19}/colormap_applicable.pro") "Result = %s(redrawRequired)" nil)
    ("cir_3pnt" pro nil (lib . "{19}/cir_3pnt.pro") "%s, x, y, r, x0, y0" nil)
    ("chisqr_pdf" fun nil (lib . "{19}/chisqr_pdf.pro") "Result = %s(x, df)" nil)
    ("chisqr_cvf" fun nil (lib . "{19}/chisqr_cvf.pro") "Result = %s(p, df)" nil)
    ("CHEBYSHEV" fun nil (lib . "{19}/chebyshev.pro") "Result = %s(D, N)" nil)
    ("cdf_exists" fun nil (lib . "{19}/cdf_exists.pro") "Result = %s" nil)
    ("cdf_inquire" fun nil (lib . "{19}/cdf_exists.pro") "Result = %s(x)" nil)
    ("CALENDAR" pro nil (lib . "{19}/calendar.pro") "%s, MONTH, YEAR" nil)
    ("DRAW_CAL" pro nil (lib . "{19}/calendar.pro") "%s, XR, YR, MONTH, YEAR, SMALL" nil)
    ("CAL_INFO" pro nil (lib . "{19}/calendar.pro") "%s, MONTH, YEAR, START_SQUARE, NUM_DAYS" nil)
    ("CALDAT" pro nil (lib . "{19}/caldat.pro") "%s, Julian, Month, Day, Year, Hour, Minute, Second" nil)
    ("CALDAT_SCALAR" pro nil (lib . "{19}/caldat.pro") "%s, Julian, Month, Day, Year, Hour, Minute, Second" nil)
    ("C_Correlate" fun nil (lib . "{19}/c_correlate.pro") "Result = %s(X, Y, Lag)" (("Covariance") ("Double")))
    ("Cross_Cov" fun nil (lib . "{19}/c_correlate.pro") "Result = %s(X, Y, M, nX)" (("Double")))
    ("box_cursor" pro nil (lib . "{19}/box_cursor.pro") "%s, x0, y0, nx, ny" (("FIXED_SIZE") ("INIT") ("MESSAGE")))
    ("BLK_CON" fun nil (lib . "{19}/blk_con.pro") "Result = %s(Filter, Signal)" (("B_length")))
    ("bisect_pdf" fun nil (lib . "{19}/bisect_pdf.pro") "Result = %s(a, funct, u, l, del)" nil)
    ("binomial" fun nil (lib . "{19}/binomial.pro") "Result = %s(v, n, p)" nil)
    ("N_BANG" fun nil (lib . "{19}/binomial.pro") "Result = %s(n, min, fac1)" nil)
    ("bin_date" fun nil (lib . "{19}/bin_date.pro") "Result = %s(ascii_time)" nil)
    ("BILINEAR" fun nil (lib . "{19}/bilinear.pro") "Result = %s(P, IX, JY)" nil)
    ("beta" fun nil (lib . "{19}/beta.pro") "Result = %s(z, w)" (("_EXTRA")))
    ("bar_plot" pro nil (lib . "{19}/bar_plot.pro") "%s, values" (("background") ("barnames") ("baroffset") ("barspace") ("barwidth") ("baselines") ("baserange") ("colors") ("outline") ("overplot") ("rotate") ("title") ("xtitle") ("ytitle")))
    ("ascii_template" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(file)" (("BROWSE_LINES") ("CANCEL") ("GROUP")))
    ("at_check_file" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(fname)" nil)
    ("at_widget" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(name)" (("BROWSE_LINES") ("CANCEL") ("GROUP")))
    ("at_widget_event" pro nil (lib . "{19}/ascii_template.pro") "%s, ev" nil)
    ("at_widget_cleanup" pro nil (lib . "{19}/ascii_template.pro") "%s, base" nil)
    ("at_set_state" pro nil (lib . "{19}/ascii_template.pro") "%s, data" (("back") ("forward")))
    ("at_1_event" pro nil (lib . "{19}/ascii_template.pro") "%s, ev" nil)
    ("at_2_event" pro nil (lib . "{19}/ascii_template.pro") "%s, ev" nil)
    ("at_3_event" pro nil (lib . "{19}/ascii_template.pro") "%s, ev" nil)
    ("at_update" pro nil (lib . "{19}/ascii_template.pro") "%s, data, new_lptr" (("change") ("new")))
    ("at_set_list" pro nil (lib . "{19}/ascii_template.pro") "%s, data" (("just_highlight")))
    ("at_sample_record" pro nil (lib . "{19}/ascii_template.pro") "%s, data" nil)
    ("at_resize_table" pro nil (lib . "{19}/ascii_template.pro") "%s, tw, prev_size, new_size" (("last") ("text_table")))
    ("at_display_text" pro nil (lib . "{19}/ascii_template.pro") "%s, data" (("first")))
    ("at_remove_tabs" pro nil (lib . "{19}/ascii_template.pro") "%s, lines" nil)
    ("at_str_to_list" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(str)" nil)
    ("at_list_to_str" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(vals)" nil)
    ("at_str_to_val" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(str)" (("floating")))
    ("at_which_field" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(num_fields, pos, col)" nil)
    ("at_default_delimit" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(line, comment)" nil)
    ("at_num_fields" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(lines, delimit, comment)" nil)
    ("at_build_template" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(data, missing_value)" nil)
    ("at_get_lines" fun nil (lib . "{19}/ascii_template.pro") "Result = %s(name, num_lines)" (("end_reached") ("last_pos") ("skip")))
    ("at_delete_template" pro nil (lib . "{19}/ascii_template.pro") "%s, template" nil)
    ("at_build_templ" fun nil (lib . "{19}/ascii_template.pro") "Result = %s" (("comment_symbol") ("delimiter") ("field_locations") ("field_names") ("field_types") ("groups") ("missing_value") ("num_fields") ("record_start_loc")))
    ("ARROW" pro nil (lib . "{19}/arrow.pro") "%s, x0, y0, x1, y1" (("COLOR") ("DATA") ("DEVICE") ("HSIZE") ("HTHICK") ("NORMALIZED") ("SOLID") ("THICK")))
    ("ANNOTATE" pro nil (lib . "{19}/annotate.pro") "%s" (("COLOR_INDICES") ("DRAWABLE") ("LOAD_FILE") ("TEK_COLORS") ("WINDOW")))
    ("ann_make_draw_button" pro nil (lib . "{19}/annotate.pro") "%s, st" nil)
    ("ANN_DRAW_OBJECT" pro nil (lib . "{19}/annotate.pro") "%s, st, p, handle" (("MONO") ("REFRESH") ("XY")))
    ("ANN_DRAW_EVENT" pro nil (lib . "{19}/annotate.pro") "%s, ev, ann_base" nil)
    ("ANN_MOVE_RESIZE" pro nil (lib . "{19}/annotate.pro") "%s, st, mode, first, last" nil)
    ("annotate_event" pro nil (lib . "{19}/annotate.pro") "%s, ev" nil)
    ("annotate_ps" pro nil (lib . "{19}/annotate.pro") "%s, st, draw_ps, include_image" nil)
    ("ann_xfer_file" pro nil (lib . "{19}/annotate.pro") "%s, st, file" (("LOAD") ("SAVE")))
    ("ann_load_obj" fun nil (lib . "{19}/annotate.pro") "Result = %s(st, obj)" nil)
    ("ann_refresh_list" pro nil (lib . "{19}/annotate.pro") "%s, st" (("FROM_SCRATCH") ("MONO") ("WINDOW")))
    ("ann_set_controls" pro nil (lib . "{19}/annotate.pro") "%s, st, p" nil)
    ("ann_add_object" pro nil (lib . "{19}/annotate.pro") "%s, st" nil)
    ("ann_reset_mode" pro nil (lib . "{19}/annotate.pro") "%s, st, mode, submode" (("NOCLEAN")))
    ("ann_get_num" fun nil (lib . "{19}/annotate.pro") "Result = %s(str, id, minv, maxv)" nil)
    ("CW_CONFIRM" fun nil (lib . "{19}/annotate.pro") "Result = %s(message, choices)" nil)
    ("CW_CONF_EVENT" pro nil (lib . "{19}/annotate.pro") "%s, ev" nil)
    ("ANN_GET_NUM_EVENT" pro nil (lib . "{19}/annotate.pro") "%s, ev" nil)
    ("ann_closest_obj" fun nil (lib . "{19}/annotate.pro") "Result = %s(st)" nil)
    ("ann_closest" fun nil (lib . "{19}/annotate.pro") "Result = %s(xy, n, pos)" nil)
    ("b_button" fun nil (lib . "{19}/annotate.pro") "Result = %s(a)" nil)
    ("xmgr_fake" pro nil (lib . "{19}/annotate.pro") "%s, top, window" nil)
    ("Amoeba" fun nil (lib . "{19}/amoeba.pro") "Result = %s(ftol)" (("FUNCTION_NAME") ("FUNCTION_VALUE") ("NCALLS") ("NMAX") ("P0") ("SCALE") ("SIMPLEX")))
    ("amotry" fun nil (lib . "{19}/amoeba.pro") "Result = %s(p, y, psum, func, ihi, fac)" nil)
    ("A_Correlate" fun nil (lib . "{19}/a_correlate.pro") "Result = %s(X, Lag)" (("Covariance") ("Double")))
    ("Auto_Cov" fun nil (lib . "{19}/a_correlate.pro") "Result = %s(X, M, nX)" (("Double")))))

;;; idlcat.el ends here
